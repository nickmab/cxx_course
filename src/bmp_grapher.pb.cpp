// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bmp_grapher.proto

#include "advanced_cxx/bmp_grapher.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bmp_5fgrapher_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BmpGrapher_bmp_5fgrapher_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bmp_5fgrapher_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ColorConfig_bmp_5fgrapher_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bmp_5fgrapher_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DodgyColorScheme_bmp_5fgrapher_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bmp_5fgrapher_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MandelbrotCalc_bmp_5fgrapher_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bmp_5fgrapher_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RGB_bmp_5fgrapher_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bmp_5fgrapher_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleColorScheme_bmp_5fgrapher_2eproto;
namespace bmp_grapher_proto {
class RGBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RGB> _instance;
} _RGB_default_instance_;
class SingleColorSchemeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleColorScheme> _instance;
} _SingleColorScheme_default_instance_;
class DodgyColorSchemeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DodgyColorScheme> _instance;
} _DodgyColorScheme_default_instance_;
class ColorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorConfig> _instance;
  const ::bmp_grapher_proto::SingleColorScheme* single_color_scheme_;
  const ::bmp_grapher_proto::DodgyColorScheme* dodgy_color_scheme_;
} _ColorConfig_default_instance_;
class MandelbrotCalcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MandelbrotCalc> _instance;
} _MandelbrotCalc_default_instance_;
class BmpGrapherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BmpGrapher> _instance;
  const ::bmp_grapher_proto::MandelbrotCalc* mandelbrot_calc_;
} _BmpGrapher_default_instance_;
class BmpGrapherFactoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BmpGrapherFactory> _instance;
} _BmpGrapherFactory_default_instance_;
}  // namespace bmp_grapher_proto
static void InitDefaultsscc_info_BmpGrapher_bmp_5fgrapher_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bmp_grapher_proto::_BmpGrapher_default_instance_;
    new (ptr) ::bmp_grapher_proto::BmpGrapher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bmp_grapher_proto::BmpGrapher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BmpGrapher_bmp_5fgrapher_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BmpGrapher_bmp_5fgrapher_2eproto}, {
      &scc_info_MandelbrotCalc_bmp_5fgrapher_2eproto.base,
      &scc_info_ColorConfig_bmp_5fgrapher_2eproto.base,}};

static void InitDefaultsscc_info_BmpGrapherFactory_bmp_5fgrapher_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bmp_grapher_proto::_BmpGrapherFactory_default_instance_;
    new (ptr) ::bmp_grapher_proto::BmpGrapherFactory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bmp_grapher_proto::BmpGrapherFactory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BmpGrapherFactory_bmp_5fgrapher_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BmpGrapherFactory_bmp_5fgrapher_2eproto}, {
      &scc_info_BmpGrapher_bmp_5fgrapher_2eproto.base,}};

static void InitDefaultsscc_info_ColorConfig_bmp_5fgrapher_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bmp_grapher_proto::_ColorConfig_default_instance_;
    new (ptr) ::bmp_grapher_proto::ColorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bmp_grapher_proto::ColorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ColorConfig_bmp_5fgrapher_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ColorConfig_bmp_5fgrapher_2eproto}, {
      &scc_info_SingleColorScheme_bmp_5fgrapher_2eproto.base,
      &scc_info_DodgyColorScheme_bmp_5fgrapher_2eproto.base,}};

static void InitDefaultsscc_info_DodgyColorScheme_bmp_5fgrapher_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bmp_grapher_proto::_DodgyColorScheme_default_instance_;
    new (ptr) ::bmp_grapher_proto::DodgyColorScheme();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bmp_grapher_proto::DodgyColorScheme::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DodgyColorScheme_bmp_5fgrapher_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DodgyColorScheme_bmp_5fgrapher_2eproto}, {
      &scc_info_RGB_bmp_5fgrapher_2eproto.base,}};

static void InitDefaultsscc_info_MandelbrotCalc_bmp_5fgrapher_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bmp_grapher_proto::_MandelbrotCalc_default_instance_;
    new (ptr) ::bmp_grapher_proto::MandelbrotCalc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bmp_grapher_proto::MandelbrotCalc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MandelbrotCalc_bmp_5fgrapher_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MandelbrotCalc_bmp_5fgrapher_2eproto}, {}};

static void InitDefaultsscc_info_RGB_bmp_5fgrapher_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bmp_grapher_proto::_RGB_default_instance_;
    new (ptr) ::bmp_grapher_proto::RGB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bmp_grapher_proto::RGB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RGB_bmp_5fgrapher_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RGB_bmp_5fgrapher_2eproto}, {}};

static void InitDefaultsscc_info_SingleColorScheme_bmp_5fgrapher_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bmp_grapher_proto::_SingleColorScheme_default_instance_;
    new (ptr) ::bmp_grapher_proto::SingleColorScheme();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bmp_grapher_proto::SingleColorScheme::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleColorScheme_bmp_5fgrapher_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SingleColorScheme_bmp_5fgrapher_2eproto}, {
      &scc_info_RGB_bmp_5fgrapher_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bmp_5fgrapher_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bmp_5fgrapher_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bmp_5fgrapher_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bmp_5fgrapher_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::RGB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::RGB, red_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::RGB, green_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::RGB, blue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::SingleColorScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::SingleColorScheme, scaling_denominator_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::SingleColorScheme, hundred_per_cent_color_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::SingleColorScheme, scaling_base_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::DodgyColorScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::DodgyColorScheme, solid_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::ColorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::ColorConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::ColorConfig, out_filename_),
  offsetof(::bmp_grapher_proto::ColorConfigDefaultTypeInternal, single_color_scheme_),
  offsetof(::bmp_grapher_proto::ColorConfigDefaultTypeInternal, dodgy_color_scheme_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::ColorConfig, color_scheme_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::MandelbrotCalc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::MandelbrotCalc, max_iterations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapher, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapher, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapher, x_center_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapher, y_center_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapher, x_domain_width_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapher, pixel_width_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapher, pixel_height_),
  offsetof(::bmp_grapher_proto::BmpGrapherDefaultTypeInternal, mandelbrot_calc_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapher, color_configs_),
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapher, pixel_score_calculator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapherFactory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bmp_grapher_proto::BmpGrapherFactory, bitmaps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bmp_grapher_proto::RGB)},
  { 8, -1, sizeof(::bmp_grapher_proto::SingleColorScheme)},
  { 16, -1, sizeof(::bmp_grapher_proto::DodgyColorScheme)},
  { 22, -1, sizeof(::bmp_grapher_proto::ColorConfig)},
  { 31, -1, sizeof(::bmp_grapher_proto::MandelbrotCalc)},
  { 37, -1, sizeof(::bmp_grapher_proto::BmpGrapher)},
  { 50, -1, sizeof(::bmp_grapher_proto::BmpGrapherFactory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bmp_grapher_proto::_RGB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bmp_grapher_proto::_SingleColorScheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bmp_grapher_proto::_DodgyColorScheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bmp_grapher_proto::_ColorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bmp_grapher_proto::_MandelbrotCalc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bmp_grapher_proto::_BmpGrapher_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bmp_grapher_proto::_BmpGrapherFactory_default_instance_),
};

const char descriptor_table_protodef_bmp_5fgrapher_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021bmp_grapher.proto\022\021bmp_grapher_proto\"/"
  "\n\003RGB\022\013\n\003red\030\001 \001(\005\022\r\n\005green\030\002 \001(\005\022\014\n\004blu"
  "e\030\003 \001(\005\"\234\001\n\021SingleColorScheme\022\033\n\023scaling"
  "_denominator\030\001 \001(\005\0226\n\026hundred_per_cent_c"
  "olor\030\002 \001(\0132\026.bmp_grapher_proto.RGB\0222\n\022sc"
  "aling_base_color\030\003 \001(\0132\026.bmp_grapher_pro"
  "to.RGB\"\?\n\020DodgyColorScheme\022+\n\013solid_colo"
  "r\030\001 \001(\0132\026.bmp_grapher_proto.RGB\"\273\001\n\013Colo"
  "rConfig\022\024\n\014out_filename\030\001 \001(\t\022C\n\023single_"
  "color_scheme\030\002 \001(\0132$.bmp_grapher_proto.S"
  "ingleColorSchemeH\000\022A\n\022dodgy_color_scheme"
  "\030\003 \001(\0132#.bmp_grapher_proto.DodgyColorSch"
  "emeH\000B\016\n\014color_scheme\"(\n\016MandelbrotCalc\022"
  "\026\n\016max_iterations\030\001 \001(\005\"\202\002\n\nBmpGrapher\022\020"
  "\n\010x_center\030\001 \001(\001\022\020\n\010y_center\030\002 \001(\001\022\026\n\016x_"
  "domain_width\030\003 \001(\001\022\023\n\013pixel_width\030\004 \001(\005\022"
  "\024\n\014pixel_height\030\005 \001(\005\022<\n\017mandelbrot_calc"
  "\030\006 \001(\0132!.bmp_grapher_proto.MandelbrotCal"
  "cH\000\0225\n\rcolor_configs\030\007 \003(\0132\036.bmp_grapher"
  "_proto.ColorConfigB\030\n\026pixel_score_calcul"
  "ator\"C\n\021BmpGrapherFactory\022.\n\007bitmaps\030\001 \003"
  "(\0132\035.bmp_grapher_proto.BmpGrapherb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bmp_5fgrapher_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bmp_5fgrapher_2eproto_sccs[7] = {
  &scc_info_BmpGrapher_bmp_5fgrapher_2eproto.base,
  &scc_info_BmpGrapherFactory_bmp_5fgrapher_2eproto.base,
  &scc_info_ColorConfig_bmp_5fgrapher_2eproto.base,
  &scc_info_DodgyColorScheme_bmp_5fgrapher_2eproto.base,
  &scc_info_MandelbrotCalc_bmp_5fgrapher_2eproto.base,
  &scc_info_RGB_bmp_5fgrapher_2eproto.base,
  &scc_info_SingleColorScheme_bmp_5fgrapher_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bmp_5fgrapher_2eproto_once;
static bool descriptor_table_bmp_5fgrapher_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bmp_5fgrapher_2eproto = {
  &descriptor_table_bmp_5fgrapher_2eproto_initialized, descriptor_table_protodef_bmp_5fgrapher_2eproto, "bmp_grapher.proto", 881,
  &descriptor_table_bmp_5fgrapher_2eproto_once, descriptor_table_bmp_5fgrapher_2eproto_sccs, descriptor_table_bmp_5fgrapher_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_bmp_5fgrapher_2eproto::offsets,
  file_level_metadata_bmp_5fgrapher_2eproto, 7, file_level_enum_descriptors_bmp_5fgrapher_2eproto, file_level_service_descriptors_bmp_5fgrapher_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bmp_5fgrapher_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bmp_5fgrapher_2eproto)), true);
namespace bmp_grapher_proto {

// ===================================================================

void RGB::InitAsDefaultInstance() {
}
class RGB::_Internal {
 public:
};

RGB::RGB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bmp_grapher_proto.RGB)
}
RGB::RGB(const RGB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:bmp_grapher_proto.RGB)
}

void RGB::SharedCtor() {
  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
}

RGB::~RGB() {
  // @@protoc_insertion_point(destructor:bmp_grapher_proto.RGB)
  SharedDtor();
}

void RGB::SharedDtor() {
}

void RGB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RGB& RGB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RGB_bmp_5fgrapher_2eproto.base);
  return *internal_default_instance();
}


void RGB::Clear() {
// @@protoc_insertion_point(message_clear_start:bmp_grapher_proto.RGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  _internal_metadata_.Clear();
}

const char* RGB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RGB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bmp_grapher_proto.RGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 red = 1;
  if (this->red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_red(), target);
  }

  // int32 green = 2;
  if (this->green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_green(), target);
  }

  // int32 blue = 3;
  if (this->blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bmp_grapher_proto.RGB)
  return target;
}

size_t RGB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bmp_grapher_proto.RGB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 red = 1;
  if (this->red() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_red());
  }

  // int32 green = 2;
  if (this->green() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_green());
  }

  // int32 blue = 3;
  if (this->blue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RGB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bmp_grapher_proto.RGB)
  GOOGLE_DCHECK_NE(&from, this);
  const RGB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RGB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bmp_grapher_proto.RGB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bmp_grapher_proto.RGB)
    MergeFrom(*source);
  }
}

void RGB::MergeFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bmp_grapher_proto.RGB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red() != 0) {
    _internal_set_red(from._internal_red());
  }
  if (from.green() != 0) {
    _internal_set_green(from._internal_green());
  }
  if (from.blue() != 0) {
    _internal_set_blue(from._internal_blue());
  }
}

void RGB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bmp_grapher_proto.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGB::CopyFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bmp_grapher_proto.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGB::IsInitialized() const {
  return true;
}

void RGB::InternalSwap(RGB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(red_, other->red_);
  swap(green_, other->green_);
  swap(blue_, other->blue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RGB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleColorScheme::InitAsDefaultInstance() {
  ::bmp_grapher_proto::_SingleColorScheme_default_instance_._instance.get_mutable()->hundred_per_cent_color_ = const_cast< ::bmp_grapher_proto::RGB*>(
      ::bmp_grapher_proto::RGB::internal_default_instance());
  ::bmp_grapher_proto::_SingleColorScheme_default_instance_._instance.get_mutable()->scaling_base_color_ = const_cast< ::bmp_grapher_proto::RGB*>(
      ::bmp_grapher_proto::RGB::internal_default_instance());
}
class SingleColorScheme::_Internal {
 public:
  static const ::bmp_grapher_proto::RGB& hundred_per_cent_color(const SingleColorScheme* msg);
  static const ::bmp_grapher_proto::RGB& scaling_base_color(const SingleColorScheme* msg);
};

const ::bmp_grapher_proto::RGB&
SingleColorScheme::_Internal::hundred_per_cent_color(const SingleColorScheme* msg) {
  return *msg->hundred_per_cent_color_;
}
const ::bmp_grapher_proto::RGB&
SingleColorScheme::_Internal::scaling_base_color(const SingleColorScheme* msg) {
  return *msg->scaling_base_color_;
}
SingleColorScheme::SingleColorScheme()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bmp_grapher_proto.SingleColorScheme)
}
SingleColorScheme::SingleColorScheme(const SingleColorScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_hundred_per_cent_color()) {
    hundred_per_cent_color_ = new ::bmp_grapher_proto::RGB(*from.hundred_per_cent_color_);
  } else {
    hundred_per_cent_color_ = nullptr;
  }
  if (from._internal_has_scaling_base_color()) {
    scaling_base_color_ = new ::bmp_grapher_proto::RGB(*from.scaling_base_color_);
  } else {
    scaling_base_color_ = nullptr;
  }
  scaling_denominator_ = from.scaling_denominator_;
  // @@protoc_insertion_point(copy_constructor:bmp_grapher_proto.SingleColorScheme)
}

void SingleColorScheme::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleColorScheme_bmp_5fgrapher_2eproto.base);
  ::memset(&hundred_per_cent_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scaling_denominator_) -
      reinterpret_cast<char*>(&hundred_per_cent_color_)) + sizeof(scaling_denominator_));
}

SingleColorScheme::~SingleColorScheme() {
  // @@protoc_insertion_point(destructor:bmp_grapher_proto.SingleColorScheme)
  SharedDtor();
}

void SingleColorScheme::SharedDtor() {
  if (this != internal_default_instance()) delete hundred_per_cent_color_;
  if (this != internal_default_instance()) delete scaling_base_color_;
}

void SingleColorScheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleColorScheme& SingleColorScheme::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleColorScheme_bmp_5fgrapher_2eproto.base);
  return *internal_default_instance();
}


void SingleColorScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:bmp_grapher_proto.SingleColorScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hundred_per_cent_color_ != nullptr) {
    delete hundred_per_cent_color_;
  }
  hundred_per_cent_color_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scaling_base_color_ != nullptr) {
    delete scaling_base_color_;
  }
  scaling_base_color_ = nullptr;
  scaling_denominator_ = 0;
  _internal_metadata_.Clear();
}

const char* SingleColorScheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scaling_denominator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scaling_denominator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bmp_grapher_proto.RGB hundred_per_cent_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hundred_per_cent_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bmp_grapher_proto.RGB scaling_base_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaling_base_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleColorScheme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bmp_grapher_proto.SingleColorScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scaling_denominator = 1;
  if (this->scaling_denominator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scaling_denominator(), target);
  }

  // .bmp_grapher_proto.RGB hundred_per_cent_color = 2;
  if (this->has_hundred_per_cent_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hundred_per_cent_color(this), target, stream);
  }

  // .bmp_grapher_proto.RGB scaling_base_color = 3;
  if (this->has_scaling_base_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::scaling_base_color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bmp_grapher_proto.SingleColorScheme)
  return target;
}

size_t SingleColorScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bmp_grapher_proto.SingleColorScheme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bmp_grapher_proto.RGB hundred_per_cent_color = 2;
  if (this->has_hundred_per_cent_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hundred_per_cent_color_);
  }

  // .bmp_grapher_proto.RGB scaling_base_color = 3;
  if (this->has_scaling_base_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaling_base_color_);
  }

  // int32 scaling_denominator = 1;
  if (this->scaling_denominator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scaling_denominator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleColorScheme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bmp_grapher_proto.SingleColorScheme)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleColorScheme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleColorScheme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bmp_grapher_proto.SingleColorScheme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bmp_grapher_proto.SingleColorScheme)
    MergeFrom(*source);
  }
}

void SingleColorScheme::MergeFrom(const SingleColorScheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bmp_grapher_proto.SingleColorScheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hundred_per_cent_color()) {
    _internal_mutable_hundred_per_cent_color()->::bmp_grapher_proto::RGB::MergeFrom(from._internal_hundred_per_cent_color());
  }
  if (from.has_scaling_base_color()) {
    _internal_mutable_scaling_base_color()->::bmp_grapher_proto::RGB::MergeFrom(from._internal_scaling_base_color());
  }
  if (from.scaling_denominator() != 0) {
    _internal_set_scaling_denominator(from._internal_scaling_denominator());
  }
}

void SingleColorScheme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bmp_grapher_proto.SingleColorScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleColorScheme::CopyFrom(const SingleColorScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bmp_grapher_proto.SingleColorScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleColorScheme::IsInitialized() const {
  return true;
}

void SingleColorScheme::InternalSwap(SingleColorScheme* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hundred_per_cent_color_, other->hundred_per_cent_color_);
  swap(scaling_base_color_, other->scaling_base_color_);
  swap(scaling_denominator_, other->scaling_denominator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleColorScheme::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DodgyColorScheme::InitAsDefaultInstance() {
  ::bmp_grapher_proto::_DodgyColorScheme_default_instance_._instance.get_mutable()->solid_color_ = const_cast< ::bmp_grapher_proto::RGB*>(
      ::bmp_grapher_proto::RGB::internal_default_instance());
}
class DodgyColorScheme::_Internal {
 public:
  static const ::bmp_grapher_proto::RGB& solid_color(const DodgyColorScheme* msg);
};

const ::bmp_grapher_proto::RGB&
DodgyColorScheme::_Internal::solid_color(const DodgyColorScheme* msg) {
  return *msg->solid_color_;
}
DodgyColorScheme::DodgyColorScheme()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bmp_grapher_proto.DodgyColorScheme)
}
DodgyColorScheme::DodgyColorScheme(const DodgyColorScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_solid_color()) {
    solid_color_ = new ::bmp_grapher_proto::RGB(*from.solid_color_);
  } else {
    solid_color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bmp_grapher_proto.DodgyColorScheme)
}

void DodgyColorScheme::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DodgyColorScheme_bmp_5fgrapher_2eproto.base);
  solid_color_ = nullptr;
}

DodgyColorScheme::~DodgyColorScheme() {
  // @@protoc_insertion_point(destructor:bmp_grapher_proto.DodgyColorScheme)
  SharedDtor();
}

void DodgyColorScheme::SharedDtor() {
  if (this != internal_default_instance()) delete solid_color_;
}

void DodgyColorScheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DodgyColorScheme& DodgyColorScheme::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DodgyColorScheme_bmp_5fgrapher_2eproto.base);
  return *internal_default_instance();
}


void DodgyColorScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:bmp_grapher_proto.DodgyColorScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && solid_color_ != nullptr) {
    delete solid_color_;
  }
  solid_color_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DodgyColorScheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bmp_grapher_proto.RGB solid_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solid_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DodgyColorScheme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bmp_grapher_proto.DodgyColorScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bmp_grapher_proto.RGB solid_color = 1;
  if (this->has_solid_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::solid_color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bmp_grapher_proto.DodgyColorScheme)
  return target;
}

size_t DodgyColorScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bmp_grapher_proto.DodgyColorScheme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bmp_grapher_proto.RGB solid_color = 1;
  if (this->has_solid_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solid_color_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DodgyColorScheme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bmp_grapher_proto.DodgyColorScheme)
  GOOGLE_DCHECK_NE(&from, this);
  const DodgyColorScheme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DodgyColorScheme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bmp_grapher_proto.DodgyColorScheme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bmp_grapher_proto.DodgyColorScheme)
    MergeFrom(*source);
  }
}

void DodgyColorScheme::MergeFrom(const DodgyColorScheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bmp_grapher_proto.DodgyColorScheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solid_color()) {
    _internal_mutable_solid_color()->::bmp_grapher_proto::RGB::MergeFrom(from._internal_solid_color());
  }
}

void DodgyColorScheme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bmp_grapher_proto.DodgyColorScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DodgyColorScheme::CopyFrom(const DodgyColorScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bmp_grapher_proto.DodgyColorScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DodgyColorScheme::IsInitialized() const {
  return true;
}

void DodgyColorScheme::InternalSwap(DodgyColorScheme* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(solid_color_, other->solid_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DodgyColorScheme::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColorConfig::InitAsDefaultInstance() {
  ::bmp_grapher_proto::_ColorConfig_default_instance_.single_color_scheme_ = const_cast< ::bmp_grapher_proto::SingleColorScheme*>(
      ::bmp_grapher_proto::SingleColorScheme::internal_default_instance());
  ::bmp_grapher_proto::_ColorConfig_default_instance_.dodgy_color_scheme_ = const_cast< ::bmp_grapher_proto::DodgyColorScheme*>(
      ::bmp_grapher_proto::DodgyColorScheme::internal_default_instance());
}
class ColorConfig::_Internal {
 public:
  static const ::bmp_grapher_proto::SingleColorScheme& single_color_scheme(const ColorConfig* msg);
  static const ::bmp_grapher_proto::DodgyColorScheme& dodgy_color_scheme(const ColorConfig* msg);
};

const ::bmp_grapher_proto::SingleColorScheme&
ColorConfig::_Internal::single_color_scheme(const ColorConfig* msg) {
  return *msg->color_scheme_.single_color_scheme_;
}
const ::bmp_grapher_proto::DodgyColorScheme&
ColorConfig::_Internal::dodgy_color_scheme(const ColorConfig* msg) {
  return *msg->color_scheme_.dodgy_color_scheme_;
}
void ColorConfig::set_allocated_single_color_scheme(::bmp_grapher_proto::SingleColorScheme* single_color_scheme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_color_scheme();
  if (single_color_scheme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      single_color_scheme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_color_scheme, submessage_arena);
    }
    set_has_single_color_scheme();
    color_scheme_.single_color_scheme_ = single_color_scheme;
  }
  // @@protoc_insertion_point(field_set_allocated:bmp_grapher_proto.ColorConfig.single_color_scheme)
}
void ColorConfig::set_allocated_dodgy_color_scheme(::bmp_grapher_proto::DodgyColorScheme* dodgy_color_scheme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_color_scheme();
  if (dodgy_color_scheme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dodgy_color_scheme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dodgy_color_scheme, submessage_arena);
    }
    set_has_dodgy_color_scheme();
    color_scheme_.dodgy_color_scheme_ = dodgy_color_scheme;
  }
  // @@protoc_insertion_point(field_set_allocated:bmp_grapher_proto.ColorConfig.dodgy_color_scheme)
}
ColorConfig::ColorConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bmp_grapher_proto.ColorConfig)
}
ColorConfig::ColorConfig(const ColorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  out_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_out_filename().empty()) {
    out_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_filename_);
  }
  clear_has_color_scheme();
  switch (from.color_scheme_case()) {
    case kSingleColorScheme: {
      _internal_mutable_single_color_scheme()->::bmp_grapher_proto::SingleColorScheme::MergeFrom(from._internal_single_color_scheme());
      break;
    }
    case kDodgyColorScheme: {
      _internal_mutable_dodgy_color_scheme()->::bmp_grapher_proto::DodgyColorScheme::MergeFrom(from._internal_dodgy_color_scheme());
      break;
    }
    case COLOR_SCHEME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bmp_grapher_proto.ColorConfig)
}

void ColorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColorConfig_bmp_5fgrapher_2eproto.base);
  out_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_color_scheme();
}

ColorConfig::~ColorConfig() {
  // @@protoc_insertion_point(destructor:bmp_grapher_proto.ColorConfig)
  SharedDtor();
}

void ColorConfig::SharedDtor() {
  out_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_color_scheme()) {
    clear_color_scheme();
  }
}

void ColorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorConfig& ColorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorConfig_bmp_5fgrapher_2eproto.base);
  return *internal_default_instance();
}


void ColorConfig::clear_color_scheme() {
// @@protoc_insertion_point(one_of_clear_start:bmp_grapher_proto.ColorConfig)
  switch (color_scheme_case()) {
    case kSingleColorScheme: {
      delete color_scheme_.single_color_scheme_;
      break;
    }
    case kDodgyColorScheme: {
      delete color_scheme_.dodgy_color_scheme_;
      break;
    }
    case COLOR_SCHEME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COLOR_SCHEME_NOT_SET;
}


void ColorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bmp_grapher_proto.ColorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_color_scheme();
  _internal_metadata_.Clear();
}

const char* ColorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string out_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_out_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bmp_grapher_proto.ColorConfig.out_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bmp_grapher_proto.SingleColorScheme single_color_scheme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_color_scheme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bmp_grapher_proto.DodgyColorScheme dodgy_color_scheme = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dodgy_color_scheme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bmp_grapher_proto.ColorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string out_filename = 1;
  if (this->out_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_out_filename().data(), static_cast<int>(this->_internal_out_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bmp_grapher_proto.ColorConfig.out_filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_out_filename(), target);
  }

  // .bmp_grapher_proto.SingleColorScheme single_color_scheme = 2;
  if (_internal_has_single_color_scheme()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::single_color_scheme(this), target, stream);
  }

  // .bmp_grapher_proto.DodgyColorScheme dodgy_color_scheme = 3;
  if (_internal_has_dodgy_color_scheme()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dodgy_color_scheme(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bmp_grapher_proto.ColorConfig)
  return target;
}

size_t ColorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bmp_grapher_proto.ColorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string out_filename = 1;
  if (this->out_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_out_filename());
  }

  switch (color_scheme_case()) {
    // .bmp_grapher_proto.SingleColorScheme single_color_scheme = 2;
    case kSingleColorScheme: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_scheme_.single_color_scheme_);
      break;
    }
    // .bmp_grapher_proto.DodgyColorScheme dodgy_color_scheme = 3;
    case kDodgyColorScheme: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_scheme_.dodgy_color_scheme_);
      break;
    }
    case COLOR_SCHEME_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bmp_grapher_proto.ColorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bmp_grapher_proto.ColorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bmp_grapher_proto.ColorConfig)
    MergeFrom(*source);
  }
}

void ColorConfig::MergeFrom(const ColorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bmp_grapher_proto.ColorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.out_filename().size() > 0) {

    out_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_filename_);
  }
  switch (from.color_scheme_case()) {
    case kSingleColorScheme: {
      _internal_mutable_single_color_scheme()->::bmp_grapher_proto::SingleColorScheme::MergeFrom(from._internal_single_color_scheme());
      break;
    }
    case kDodgyColorScheme: {
      _internal_mutable_dodgy_color_scheme()->::bmp_grapher_proto::DodgyColorScheme::MergeFrom(from._internal_dodgy_color_scheme());
      break;
    }
    case COLOR_SCHEME_NOT_SET: {
      break;
    }
  }
}

void ColorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bmp_grapher_proto.ColorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorConfig::CopyFrom(const ColorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bmp_grapher_proto.ColorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorConfig::IsInitialized() const {
  return true;
}

void ColorConfig::InternalSwap(ColorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  out_filename_.Swap(&other->out_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_scheme_, other->color_scheme_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MandelbrotCalc::InitAsDefaultInstance() {
}
class MandelbrotCalc::_Internal {
 public:
};

MandelbrotCalc::MandelbrotCalc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bmp_grapher_proto.MandelbrotCalc)
}
MandelbrotCalc::MandelbrotCalc(const MandelbrotCalc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_iterations_ = from.max_iterations_;
  // @@protoc_insertion_point(copy_constructor:bmp_grapher_proto.MandelbrotCalc)
}

void MandelbrotCalc::SharedCtor() {
  max_iterations_ = 0;
}

MandelbrotCalc::~MandelbrotCalc() {
  // @@protoc_insertion_point(destructor:bmp_grapher_proto.MandelbrotCalc)
  SharedDtor();
}

void MandelbrotCalc::SharedDtor() {
}

void MandelbrotCalc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MandelbrotCalc& MandelbrotCalc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MandelbrotCalc_bmp_5fgrapher_2eproto.base);
  return *internal_default_instance();
}


void MandelbrotCalc::Clear() {
// @@protoc_insertion_point(message_clear_start:bmp_grapher_proto.MandelbrotCalc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_iterations_ = 0;
  _internal_metadata_.Clear();
}

const char* MandelbrotCalc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_iterations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MandelbrotCalc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bmp_grapher_proto.MandelbrotCalc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_iterations = 1;
  if (this->max_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_iterations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bmp_grapher_proto.MandelbrotCalc)
  return target;
}

size_t MandelbrotCalc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bmp_grapher_proto.MandelbrotCalc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_iterations = 1;
  if (this->max_iterations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_iterations());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MandelbrotCalc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bmp_grapher_proto.MandelbrotCalc)
  GOOGLE_DCHECK_NE(&from, this);
  const MandelbrotCalc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MandelbrotCalc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bmp_grapher_proto.MandelbrotCalc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bmp_grapher_proto.MandelbrotCalc)
    MergeFrom(*source);
  }
}

void MandelbrotCalc::MergeFrom(const MandelbrotCalc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bmp_grapher_proto.MandelbrotCalc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_iterations() != 0) {
    _internal_set_max_iterations(from._internal_max_iterations());
  }
}

void MandelbrotCalc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bmp_grapher_proto.MandelbrotCalc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MandelbrotCalc::CopyFrom(const MandelbrotCalc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bmp_grapher_proto.MandelbrotCalc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MandelbrotCalc::IsInitialized() const {
  return true;
}

void MandelbrotCalc::InternalSwap(MandelbrotCalc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_iterations_, other->max_iterations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MandelbrotCalc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BmpGrapher::InitAsDefaultInstance() {
  ::bmp_grapher_proto::_BmpGrapher_default_instance_.mandelbrot_calc_ = const_cast< ::bmp_grapher_proto::MandelbrotCalc*>(
      ::bmp_grapher_proto::MandelbrotCalc::internal_default_instance());
}
class BmpGrapher::_Internal {
 public:
  static const ::bmp_grapher_proto::MandelbrotCalc& mandelbrot_calc(const BmpGrapher* msg);
};

const ::bmp_grapher_proto::MandelbrotCalc&
BmpGrapher::_Internal::mandelbrot_calc(const BmpGrapher* msg) {
  return *msg->pixel_score_calculator_.mandelbrot_calc_;
}
void BmpGrapher::set_allocated_mandelbrot_calc(::bmp_grapher_proto::MandelbrotCalc* mandelbrot_calc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_pixel_score_calculator();
  if (mandelbrot_calc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mandelbrot_calc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mandelbrot_calc, submessage_arena);
    }
    set_has_mandelbrot_calc();
    pixel_score_calculator_.mandelbrot_calc_ = mandelbrot_calc;
  }
  // @@protoc_insertion_point(field_set_allocated:bmp_grapher_proto.BmpGrapher.mandelbrot_calc)
}
BmpGrapher::BmpGrapher()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bmp_grapher_proto.BmpGrapher)
}
BmpGrapher::BmpGrapher(const BmpGrapher& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      color_configs_(from.color_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_center_, &from.x_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_height_) -
    reinterpret_cast<char*>(&x_center_)) + sizeof(pixel_height_));
  clear_has_pixel_score_calculator();
  switch (from.pixel_score_calculator_case()) {
    case kMandelbrotCalc: {
      _internal_mutable_mandelbrot_calc()->::bmp_grapher_proto::MandelbrotCalc::MergeFrom(from._internal_mandelbrot_calc());
      break;
    }
    case PIXEL_SCORE_CALCULATOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bmp_grapher_proto.BmpGrapher)
}

void BmpGrapher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BmpGrapher_bmp_5fgrapher_2eproto.base);
  ::memset(&x_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_height_) -
      reinterpret_cast<char*>(&x_center_)) + sizeof(pixel_height_));
  clear_has_pixel_score_calculator();
}

BmpGrapher::~BmpGrapher() {
  // @@protoc_insertion_point(destructor:bmp_grapher_proto.BmpGrapher)
  SharedDtor();
}

void BmpGrapher::SharedDtor() {
  if (has_pixel_score_calculator()) {
    clear_pixel_score_calculator();
  }
}

void BmpGrapher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BmpGrapher& BmpGrapher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BmpGrapher_bmp_5fgrapher_2eproto.base);
  return *internal_default_instance();
}


void BmpGrapher::clear_pixel_score_calculator() {
// @@protoc_insertion_point(one_of_clear_start:bmp_grapher_proto.BmpGrapher)
  switch (pixel_score_calculator_case()) {
    case kMandelbrotCalc: {
      delete pixel_score_calculator_.mandelbrot_calc_;
      break;
    }
    case PIXEL_SCORE_CALCULATOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PIXEL_SCORE_CALCULATOR_NOT_SET;
}


void BmpGrapher::Clear() {
// @@protoc_insertion_point(message_clear_start:bmp_grapher_proto.BmpGrapher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_configs_.Clear();
  ::memset(&x_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_height_) -
      reinterpret_cast<char*>(&x_center_)) + sizeof(pixel_height_));
  clear_pixel_score_calculator();
  _internal_metadata_.Clear();
}

const char* BmpGrapher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x_center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y_center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x_domain_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_domain_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 pixel_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pixel_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pixel_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pixel_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bmp_grapher_proto.MandelbrotCalc mandelbrot_calc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mandelbrot_calc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bmp_grapher_proto.ColorConfig color_configs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_color_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BmpGrapher::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bmp_grapher_proto.BmpGrapher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_center = 1;
  if (!(this->x_center() <= 0 && this->x_center() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x_center(), target);
  }

  // double y_center = 2;
  if (!(this->y_center() <= 0 && this->y_center() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y_center(), target);
  }

  // double x_domain_width = 3;
  if (!(this->x_domain_width() <= 0 && this->x_domain_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x_domain_width(), target);
  }

  // int32 pixel_width = 4;
  if (this->pixel_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pixel_width(), target);
  }

  // int32 pixel_height = 5;
  if (this->pixel_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pixel_height(), target);
  }

  // .bmp_grapher_proto.MandelbrotCalc mandelbrot_calc = 6;
  if (_internal_has_mandelbrot_calc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mandelbrot_calc(this), target, stream);
  }

  // repeated .bmp_grapher_proto.ColorConfig color_configs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_color_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_color_configs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bmp_grapher_proto.BmpGrapher)
  return target;
}

size_t BmpGrapher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bmp_grapher_proto.BmpGrapher)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bmp_grapher_proto.ColorConfig color_configs = 7;
  total_size += 1UL * this->_internal_color_configs_size();
  for (const auto& msg : this->color_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double x_center = 1;
  if (!(this->x_center() <= 0 && this->x_center() >= 0)) {
    total_size += 1 + 8;
  }

  // double y_center = 2;
  if (!(this->y_center() <= 0 && this->y_center() >= 0)) {
    total_size += 1 + 8;
  }

  // double x_domain_width = 3;
  if (!(this->x_domain_width() <= 0 && this->x_domain_width() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 pixel_width = 4;
  if (this->pixel_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pixel_width());
  }

  // int32 pixel_height = 5;
  if (this->pixel_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pixel_height());
  }

  switch (pixel_score_calculator_case()) {
    // .bmp_grapher_proto.MandelbrotCalc mandelbrot_calc = 6;
    case kMandelbrotCalc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pixel_score_calculator_.mandelbrot_calc_);
      break;
    }
    case PIXEL_SCORE_CALCULATOR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BmpGrapher::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bmp_grapher_proto.BmpGrapher)
  GOOGLE_DCHECK_NE(&from, this);
  const BmpGrapher* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BmpGrapher>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bmp_grapher_proto.BmpGrapher)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bmp_grapher_proto.BmpGrapher)
    MergeFrom(*source);
  }
}

void BmpGrapher::MergeFrom(const BmpGrapher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bmp_grapher_proto.BmpGrapher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  color_configs_.MergeFrom(from.color_configs_);
  if (!(from.x_center() <= 0 && from.x_center() >= 0)) {
    _internal_set_x_center(from._internal_x_center());
  }
  if (!(from.y_center() <= 0 && from.y_center() >= 0)) {
    _internal_set_y_center(from._internal_y_center());
  }
  if (!(from.x_domain_width() <= 0 && from.x_domain_width() >= 0)) {
    _internal_set_x_domain_width(from._internal_x_domain_width());
  }
  if (from.pixel_width() != 0) {
    _internal_set_pixel_width(from._internal_pixel_width());
  }
  if (from.pixel_height() != 0) {
    _internal_set_pixel_height(from._internal_pixel_height());
  }
  switch (from.pixel_score_calculator_case()) {
    case kMandelbrotCalc: {
      _internal_mutable_mandelbrot_calc()->::bmp_grapher_proto::MandelbrotCalc::MergeFrom(from._internal_mandelbrot_calc());
      break;
    }
    case PIXEL_SCORE_CALCULATOR_NOT_SET: {
      break;
    }
  }
}

void BmpGrapher::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bmp_grapher_proto.BmpGrapher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BmpGrapher::CopyFrom(const BmpGrapher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bmp_grapher_proto.BmpGrapher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BmpGrapher::IsInitialized() const {
  return true;
}

void BmpGrapher::InternalSwap(BmpGrapher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  color_configs_.InternalSwap(&other->color_configs_);
  swap(x_center_, other->x_center_);
  swap(y_center_, other->y_center_);
  swap(x_domain_width_, other->x_domain_width_);
  swap(pixel_width_, other->pixel_width_);
  swap(pixel_height_, other->pixel_height_);
  swap(pixel_score_calculator_, other->pixel_score_calculator_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BmpGrapher::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BmpGrapherFactory::InitAsDefaultInstance() {
}
class BmpGrapherFactory::_Internal {
 public:
};

BmpGrapherFactory::BmpGrapherFactory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bmp_grapher_proto.BmpGrapherFactory)
}
BmpGrapherFactory::BmpGrapherFactory(const BmpGrapherFactory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bitmaps_(from.bitmaps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bmp_grapher_proto.BmpGrapherFactory)
}

void BmpGrapherFactory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BmpGrapherFactory_bmp_5fgrapher_2eproto.base);
}

BmpGrapherFactory::~BmpGrapherFactory() {
  // @@protoc_insertion_point(destructor:bmp_grapher_proto.BmpGrapherFactory)
  SharedDtor();
}

void BmpGrapherFactory::SharedDtor() {
}

void BmpGrapherFactory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BmpGrapherFactory& BmpGrapherFactory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BmpGrapherFactory_bmp_5fgrapher_2eproto.base);
  return *internal_default_instance();
}


void BmpGrapherFactory::Clear() {
// @@protoc_insertion_point(message_clear_start:bmp_grapher_proto.BmpGrapherFactory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitmaps_.Clear();
  _internal_metadata_.Clear();
}

const char* BmpGrapherFactory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bmp_grapher_proto.BmpGrapher bitmaps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bitmaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BmpGrapherFactory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bmp_grapher_proto.BmpGrapherFactory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bmp_grapher_proto.BmpGrapher bitmaps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bitmaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bitmaps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bmp_grapher_proto.BmpGrapherFactory)
  return target;
}

size_t BmpGrapherFactory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bmp_grapher_proto.BmpGrapherFactory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bmp_grapher_proto.BmpGrapher bitmaps = 1;
  total_size += 1UL * this->_internal_bitmaps_size();
  for (const auto& msg : this->bitmaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BmpGrapherFactory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bmp_grapher_proto.BmpGrapherFactory)
  GOOGLE_DCHECK_NE(&from, this);
  const BmpGrapherFactory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BmpGrapherFactory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bmp_grapher_proto.BmpGrapherFactory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bmp_grapher_proto.BmpGrapherFactory)
    MergeFrom(*source);
  }
}

void BmpGrapherFactory::MergeFrom(const BmpGrapherFactory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bmp_grapher_proto.BmpGrapherFactory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bitmaps_.MergeFrom(from.bitmaps_);
}

void BmpGrapherFactory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bmp_grapher_proto.BmpGrapherFactory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BmpGrapherFactory::CopyFrom(const BmpGrapherFactory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bmp_grapher_proto.BmpGrapherFactory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BmpGrapherFactory::IsInitialized() const {
  return true;
}

void BmpGrapherFactory::InternalSwap(BmpGrapherFactory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bitmaps_.InternalSwap(&other->bitmaps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BmpGrapherFactory::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bmp_grapher_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bmp_grapher_proto::RGB* Arena::CreateMaybeMessage< ::bmp_grapher_proto::RGB >(Arena* arena) {
  return Arena::CreateInternal< ::bmp_grapher_proto::RGB >(arena);
}
template<> PROTOBUF_NOINLINE ::bmp_grapher_proto::SingleColorScheme* Arena::CreateMaybeMessage< ::bmp_grapher_proto::SingleColorScheme >(Arena* arena) {
  return Arena::CreateInternal< ::bmp_grapher_proto::SingleColorScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::bmp_grapher_proto::DodgyColorScheme* Arena::CreateMaybeMessage< ::bmp_grapher_proto::DodgyColorScheme >(Arena* arena) {
  return Arena::CreateInternal< ::bmp_grapher_proto::DodgyColorScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::bmp_grapher_proto::ColorConfig* Arena::CreateMaybeMessage< ::bmp_grapher_proto::ColorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::bmp_grapher_proto::ColorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bmp_grapher_proto::MandelbrotCalc* Arena::CreateMaybeMessage< ::bmp_grapher_proto::MandelbrotCalc >(Arena* arena) {
  return Arena::CreateInternal< ::bmp_grapher_proto::MandelbrotCalc >(arena);
}
template<> PROTOBUF_NOINLINE ::bmp_grapher_proto::BmpGrapher* Arena::CreateMaybeMessage< ::bmp_grapher_proto::BmpGrapher >(Arena* arena) {
  return Arena::CreateInternal< ::bmp_grapher_proto::BmpGrapher >(arena);
}
template<> PROTOBUF_NOINLINE ::bmp_grapher_proto::BmpGrapherFactory* Arena::CreateMaybeMessage< ::bmp_grapher_proto::BmpGrapherFactory >(Arena* arena) {
  return Arena::CreateInternal< ::bmp_grapher_proto::BmpGrapherFactory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
