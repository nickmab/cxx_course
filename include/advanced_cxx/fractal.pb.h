// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fractal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fractal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fractal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fractal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fractal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fractal_2eproto;
namespace fractal_proto {
class FractalBmpFactory;
class FractalBmpFactoryDefaultTypeInternal;
extern FractalBmpFactoryDefaultTypeInternal _FractalBmpFactory_default_instance_;
class MandelbrotBmp;
class MandelbrotBmpDefaultTypeInternal;
extern MandelbrotBmpDefaultTypeInternal _MandelbrotBmp_default_instance_;
class RGB;
class RGBDefaultTypeInternal;
extern RGBDefaultTypeInternal _RGB_default_instance_;
class SingleColorScheme;
class SingleColorSchemeDefaultTypeInternal;
extern SingleColorSchemeDefaultTypeInternal _SingleColorScheme_default_instance_;
}  // namespace fractal_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::fractal_proto::FractalBmpFactory* Arena::CreateMaybeMessage<::fractal_proto::FractalBmpFactory>(Arena*);
template<> ::fractal_proto::MandelbrotBmp* Arena::CreateMaybeMessage<::fractal_proto::MandelbrotBmp>(Arena*);
template<> ::fractal_proto::RGB* Arena::CreateMaybeMessage<::fractal_proto::RGB>(Arena*);
template<> ::fractal_proto::SingleColorScheme* Arena::CreateMaybeMessage<::fractal_proto::SingleColorScheme>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fractal_proto {

// ===================================================================

class RGB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fractal_proto.RGB) */ {
 public:
  RGB();
  virtual ~RGB();

  RGB(const RGB& from);
  RGB(RGB&& from) noexcept
    : RGB() {
    *this = ::std::move(from);
  }

  inline RGB& operator=(const RGB& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGB& operator=(RGB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RGB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RGB* internal_default_instance() {
    return reinterpret_cast<const RGB*>(
               &_RGB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RGB& a, RGB& b) {
    a.Swap(&b);
  }
  inline void Swap(RGB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RGB* New() const final {
    return CreateMaybeMessage<RGB>(nullptr);
  }

  RGB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RGB& from);
  void MergeFrom(const RGB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fractal_proto.RGB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fractal_2eproto);
    return ::descriptor_table_fractal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
  };
  // int32 red = 1;
  void clear_red();
  ::PROTOBUF_NAMESPACE_ID::int32 red() const;
  void set_red(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_red() const;
  void _internal_set_red(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 green = 2;
  void clear_green();
  ::PROTOBUF_NAMESPACE_ID::int32 green() const;
  void set_green(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_green() const;
  void _internal_set_green(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 blue = 3;
  void clear_blue();
  ::PROTOBUF_NAMESPACE_ID::int32 blue() const;
  void set_blue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blue() const;
  void _internal_set_blue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fractal_proto.RGB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 red_;
  ::PROTOBUF_NAMESPACE_ID::int32 green_;
  ::PROTOBUF_NAMESPACE_ID::int32 blue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fractal_2eproto;
};
// -------------------------------------------------------------------

class SingleColorScheme :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fractal_proto.SingleColorScheme) */ {
 public:
  SingleColorScheme();
  virtual ~SingleColorScheme();

  SingleColorScheme(const SingleColorScheme& from);
  SingleColorScheme(SingleColorScheme&& from) noexcept
    : SingleColorScheme() {
    *this = ::std::move(from);
  }

  inline SingleColorScheme& operator=(const SingleColorScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleColorScheme& operator=(SingleColorScheme&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleColorScheme& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleColorScheme* internal_default_instance() {
    return reinterpret_cast<const SingleColorScheme*>(
               &_SingleColorScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SingleColorScheme& a, SingleColorScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleColorScheme* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleColorScheme* New() const final {
    return CreateMaybeMessage<SingleColorScheme>(nullptr);
  }

  SingleColorScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleColorScheme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleColorScheme& from);
  void MergeFrom(const SingleColorScheme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleColorScheme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fractal_proto.SingleColorScheme";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fractal_2eproto);
    return ::descriptor_table_fractal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutFilenameFieldNumber = 3,
    kMandelbrotColorFieldNumber = 1,
    kIterBaseColorFieldNumber = 2,
  };
  // string out_filename = 3;
  void clear_out_filename();
  const std::string& out_filename() const;
  void set_out_filename(const std::string& value);
  void set_out_filename(std::string&& value);
  void set_out_filename(const char* value);
  void set_out_filename(const char* value, size_t size);
  std::string* mutable_out_filename();
  std::string* release_out_filename();
  void set_allocated_out_filename(std::string* out_filename);
  private:
  const std::string& _internal_out_filename() const;
  void _internal_set_out_filename(const std::string& value);
  std::string* _internal_mutable_out_filename();
  public:

  // .fractal_proto.RGB mandelbrot_color = 1;
  bool has_mandelbrot_color() const;
  private:
  bool _internal_has_mandelbrot_color() const;
  public:
  void clear_mandelbrot_color();
  const ::fractal_proto::RGB& mandelbrot_color() const;
  ::fractal_proto::RGB* release_mandelbrot_color();
  ::fractal_proto::RGB* mutable_mandelbrot_color();
  void set_allocated_mandelbrot_color(::fractal_proto::RGB* mandelbrot_color);
  private:
  const ::fractal_proto::RGB& _internal_mandelbrot_color() const;
  ::fractal_proto::RGB* _internal_mutable_mandelbrot_color();
  public:

  // .fractal_proto.RGB iter_base_color = 2;
  bool has_iter_base_color() const;
  private:
  bool _internal_has_iter_base_color() const;
  public:
  void clear_iter_base_color();
  const ::fractal_proto::RGB& iter_base_color() const;
  ::fractal_proto::RGB* release_iter_base_color();
  ::fractal_proto::RGB* mutable_iter_base_color();
  void set_allocated_iter_base_color(::fractal_proto::RGB* iter_base_color);
  private:
  const ::fractal_proto::RGB& _internal_iter_base_color() const;
  ::fractal_proto::RGB* _internal_mutable_iter_base_color();
  public:

  // @@protoc_insertion_point(class_scope:fractal_proto.SingleColorScheme)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_filename_;
  ::fractal_proto::RGB* mandelbrot_color_;
  ::fractal_proto::RGB* iter_base_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fractal_2eproto;
};
// -------------------------------------------------------------------

class MandelbrotBmp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fractal_proto.MandelbrotBmp) */ {
 public:
  MandelbrotBmp();
  virtual ~MandelbrotBmp();

  MandelbrotBmp(const MandelbrotBmp& from);
  MandelbrotBmp(MandelbrotBmp&& from) noexcept
    : MandelbrotBmp() {
    *this = ::std::move(from);
  }

  inline MandelbrotBmp& operator=(const MandelbrotBmp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MandelbrotBmp& operator=(MandelbrotBmp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MandelbrotBmp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MandelbrotBmp* internal_default_instance() {
    return reinterpret_cast<const MandelbrotBmp*>(
               &_MandelbrotBmp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MandelbrotBmp& a, MandelbrotBmp& b) {
    a.Swap(&b);
  }
  inline void Swap(MandelbrotBmp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MandelbrotBmp* New() const final {
    return CreateMaybeMessage<MandelbrotBmp>(nullptr);
  }

  MandelbrotBmp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MandelbrotBmp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MandelbrotBmp& from);
  void MergeFrom(const MandelbrotBmp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MandelbrotBmp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fractal_proto.MandelbrotBmp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fractal_2eproto);
    return ::descriptor_table_fractal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorSchemesFieldNumber = 6,
    kXCenterFieldNumber = 1,
    kYCenterFieldNumber = 2,
    kXDomainWidthFieldNumber = 3,
    kPixelWidthFieldNumber = 4,
    kPixelHeightFieldNumber = 5,
  };
  // repeated .fractal_proto.SingleColorScheme color_schemes = 6;
  int color_schemes_size() const;
  private:
  int _internal_color_schemes_size() const;
  public:
  void clear_color_schemes();
  ::fractal_proto::SingleColorScheme* mutable_color_schemes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::SingleColorScheme >*
      mutable_color_schemes();
  private:
  const ::fractal_proto::SingleColorScheme& _internal_color_schemes(int index) const;
  ::fractal_proto::SingleColorScheme* _internal_add_color_schemes();
  public:
  const ::fractal_proto::SingleColorScheme& color_schemes(int index) const;
  ::fractal_proto::SingleColorScheme* add_color_schemes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::SingleColorScheme >&
      color_schemes() const;

  // double x_center = 1;
  void clear_x_center();
  double x_center() const;
  void set_x_center(double value);
  private:
  double _internal_x_center() const;
  void _internal_set_x_center(double value);
  public:

  // double y_center = 2;
  void clear_y_center();
  double y_center() const;
  void set_y_center(double value);
  private:
  double _internal_y_center() const;
  void _internal_set_y_center(double value);
  public:

  // double x_domain_width = 3;
  void clear_x_domain_width();
  double x_domain_width() const;
  void set_x_domain_width(double value);
  private:
  double _internal_x_domain_width() const;
  void _internal_set_x_domain_width(double value);
  public:

  // int32 pixel_width = 4;
  void clear_pixel_width();
  ::PROTOBUF_NAMESPACE_ID::int32 pixel_width() const;
  void set_pixel_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pixel_width() const;
  void _internal_set_pixel_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pixel_height = 5;
  void clear_pixel_height();
  ::PROTOBUF_NAMESPACE_ID::int32 pixel_height() const;
  void set_pixel_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pixel_height() const;
  void _internal_set_pixel_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fractal_proto.MandelbrotBmp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::SingleColorScheme > color_schemes_;
  double x_center_;
  double y_center_;
  double x_domain_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 pixel_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 pixel_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fractal_2eproto;
};
// -------------------------------------------------------------------

class FractalBmpFactory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fractal_proto.FractalBmpFactory) */ {
 public:
  FractalBmpFactory();
  virtual ~FractalBmpFactory();

  FractalBmpFactory(const FractalBmpFactory& from);
  FractalBmpFactory(FractalBmpFactory&& from) noexcept
    : FractalBmpFactory() {
    *this = ::std::move(from);
  }

  inline FractalBmpFactory& operator=(const FractalBmpFactory& from) {
    CopyFrom(from);
    return *this;
  }
  inline FractalBmpFactory& operator=(FractalBmpFactory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FractalBmpFactory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FractalBmpFactory* internal_default_instance() {
    return reinterpret_cast<const FractalBmpFactory*>(
               &_FractalBmpFactory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FractalBmpFactory& a, FractalBmpFactory& b) {
    a.Swap(&b);
  }
  inline void Swap(FractalBmpFactory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FractalBmpFactory* New() const final {
    return CreateMaybeMessage<FractalBmpFactory>(nullptr);
  }

  FractalBmpFactory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FractalBmpFactory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FractalBmpFactory& from);
  void MergeFrom(const FractalBmpFactory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FractalBmpFactory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fractal_proto.FractalBmpFactory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fractal_2eproto);
    return ::descriptor_table_fractal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitmapsFieldNumber = 1,
  };
  // repeated .fractal_proto.MandelbrotBmp bitmaps = 1;
  int bitmaps_size() const;
  private:
  int _internal_bitmaps_size() const;
  public:
  void clear_bitmaps();
  ::fractal_proto::MandelbrotBmp* mutable_bitmaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::MandelbrotBmp >*
      mutable_bitmaps();
  private:
  const ::fractal_proto::MandelbrotBmp& _internal_bitmaps(int index) const;
  ::fractal_proto::MandelbrotBmp* _internal_add_bitmaps();
  public:
  const ::fractal_proto::MandelbrotBmp& bitmaps(int index) const;
  ::fractal_proto::MandelbrotBmp* add_bitmaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::MandelbrotBmp >&
      bitmaps() const;

  // @@protoc_insertion_point(class_scope:fractal_proto.FractalBmpFactory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::MandelbrotBmp > bitmaps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fractal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RGB

// int32 red = 1;
inline void RGB::clear_red() {
  red_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::_internal_red() const {
  return red_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::red() const {
  // @@protoc_insertion_point(field_get:fractal_proto.RGB.red)
  return _internal_red();
}
inline void RGB::_internal_set_red(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  red_ = value;
}
inline void RGB::set_red(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:fractal_proto.RGB.red)
}

// int32 green = 2;
inline void RGB::clear_green() {
  green_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::_internal_green() const {
  return green_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::green() const {
  // @@protoc_insertion_point(field_get:fractal_proto.RGB.green)
  return _internal_green();
}
inline void RGB::_internal_set_green(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  green_ = value;
}
inline void RGB::set_green(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:fractal_proto.RGB.green)
}

// int32 blue = 3;
inline void RGB::clear_blue() {
  blue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::_internal_blue() const {
  return blue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::blue() const {
  // @@protoc_insertion_point(field_get:fractal_proto.RGB.blue)
  return _internal_blue();
}
inline void RGB::_internal_set_blue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blue_ = value;
}
inline void RGB::set_blue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:fractal_proto.RGB.blue)
}

// -------------------------------------------------------------------

// SingleColorScheme

// .fractal_proto.RGB mandelbrot_color = 1;
inline bool SingleColorScheme::_internal_has_mandelbrot_color() const {
  return this != internal_default_instance() && mandelbrot_color_ != nullptr;
}
inline bool SingleColorScheme::has_mandelbrot_color() const {
  return _internal_has_mandelbrot_color();
}
inline void SingleColorScheme::clear_mandelbrot_color() {
  if (GetArenaNoVirtual() == nullptr && mandelbrot_color_ != nullptr) {
    delete mandelbrot_color_;
  }
  mandelbrot_color_ = nullptr;
}
inline const ::fractal_proto::RGB& SingleColorScheme::_internal_mandelbrot_color() const {
  const ::fractal_proto::RGB* p = mandelbrot_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fractal_proto::RGB*>(
      &::fractal_proto::_RGB_default_instance_);
}
inline const ::fractal_proto::RGB& SingleColorScheme::mandelbrot_color() const {
  // @@protoc_insertion_point(field_get:fractal_proto.SingleColorScheme.mandelbrot_color)
  return _internal_mandelbrot_color();
}
inline ::fractal_proto::RGB* SingleColorScheme::release_mandelbrot_color() {
  // @@protoc_insertion_point(field_release:fractal_proto.SingleColorScheme.mandelbrot_color)
  
  ::fractal_proto::RGB* temp = mandelbrot_color_;
  mandelbrot_color_ = nullptr;
  return temp;
}
inline ::fractal_proto::RGB* SingleColorScheme::_internal_mutable_mandelbrot_color() {
  
  if (mandelbrot_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::fractal_proto::RGB>(GetArenaNoVirtual());
    mandelbrot_color_ = p;
  }
  return mandelbrot_color_;
}
inline ::fractal_proto::RGB* SingleColorScheme::mutable_mandelbrot_color() {
  // @@protoc_insertion_point(field_mutable:fractal_proto.SingleColorScheme.mandelbrot_color)
  return _internal_mutable_mandelbrot_color();
}
inline void SingleColorScheme::set_allocated_mandelbrot_color(::fractal_proto::RGB* mandelbrot_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mandelbrot_color_;
  }
  if (mandelbrot_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mandelbrot_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mandelbrot_color, submessage_arena);
    }
    
  } else {
    
  }
  mandelbrot_color_ = mandelbrot_color;
  // @@protoc_insertion_point(field_set_allocated:fractal_proto.SingleColorScheme.mandelbrot_color)
}

// .fractal_proto.RGB iter_base_color = 2;
inline bool SingleColorScheme::_internal_has_iter_base_color() const {
  return this != internal_default_instance() && iter_base_color_ != nullptr;
}
inline bool SingleColorScheme::has_iter_base_color() const {
  return _internal_has_iter_base_color();
}
inline void SingleColorScheme::clear_iter_base_color() {
  if (GetArenaNoVirtual() == nullptr && iter_base_color_ != nullptr) {
    delete iter_base_color_;
  }
  iter_base_color_ = nullptr;
}
inline const ::fractal_proto::RGB& SingleColorScheme::_internal_iter_base_color() const {
  const ::fractal_proto::RGB* p = iter_base_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fractal_proto::RGB*>(
      &::fractal_proto::_RGB_default_instance_);
}
inline const ::fractal_proto::RGB& SingleColorScheme::iter_base_color() const {
  // @@protoc_insertion_point(field_get:fractal_proto.SingleColorScheme.iter_base_color)
  return _internal_iter_base_color();
}
inline ::fractal_proto::RGB* SingleColorScheme::release_iter_base_color() {
  // @@protoc_insertion_point(field_release:fractal_proto.SingleColorScheme.iter_base_color)
  
  ::fractal_proto::RGB* temp = iter_base_color_;
  iter_base_color_ = nullptr;
  return temp;
}
inline ::fractal_proto::RGB* SingleColorScheme::_internal_mutable_iter_base_color() {
  
  if (iter_base_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::fractal_proto::RGB>(GetArenaNoVirtual());
    iter_base_color_ = p;
  }
  return iter_base_color_;
}
inline ::fractal_proto::RGB* SingleColorScheme::mutable_iter_base_color() {
  // @@protoc_insertion_point(field_mutable:fractal_proto.SingleColorScheme.iter_base_color)
  return _internal_mutable_iter_base_color();
}
inline void SingleColorScheme::set_allocated_iter_base_color(::fractal_proto::RGB* iter_base_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete iter_base_color_;
  }
  if (iter_base_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      iter_base_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iter_base_color, submessage_arena);
    }
    
  } else {
    
  }
  iter_base_color_ = iter_base_color;
  // @@protoc_insertion_point(field_set_allocated:fractal_proto.SingleColorScheme.iter_base_color)
}

// string out_filename = 3;
inline void SingleColorScheme::clear_out_filename() {
  out_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SingleColorScheme::out_filename() const {
  // @@protoc_insertion_point(field_get:fractal_proto.SingleColorScheme.out_filename)
  return _internal_out_filename();
}
inline void SingleColorScheme::set_out_filename(const std::string& value) {
  _internal_set_out_filename(value);
  // @@protoc_insertion_point(field_set:fractal_proto.SingleColorScheme.out_filename)
}
inline std::string* SingleColorScheme::mutable_out_filename() {
  // @@protoc_insertion_point(field_mutable:fractal_proto.SingleColorScheme.out_filename)
  return _internal_mutable_out_filename();
}
inline const std::string& SingleColorScheme::_internal_out_filename() const {
  return out_filename_.GetNoArena();
}
inline void SingleColorScheme::_internal_set_out_filename(const std::string& value) {
  
  out_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SingleColorScheme::set_out_filename(std::string&& value) {
  
  out_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fractal_proto.SingleColorScheme.out_filename)
}
inline void SingleColorScheme::set_out_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fractal_proto.SingleColorScheme.out_filename)
}
inline void SingleColorScheme::set_out_filename(const char* value, size_t size) {
  
  out_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fractal_proto.SingleColorScheme.out_filename)
}
inline std::string* SingleColorScheme::_internal_mutable_out_filename() {
  
  return out_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleColorScheme::release_out_filename() {
  // @@protoc_insertion_point(field_release:fractal_proto.SingleColorScheme.out_filename)
  
  return out_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleColorScheme::set_allocated_out_filename(std::string* out_filename) {
  if (out_filename != nullptr) {
    
  } else {
    
  }
  out_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_filename);
  // @@protoc_insertion_point(field_set_allocated:fractal_proto.SingleColorScheme.out_filename)
}

// -------------------------------------------------------------------

// MandelbrotBmp

// double x_center = 1;
inline void MandelbrotBmp::clear_x_center() {
  x_center_ = 0;
}
inline double MandelbrotBmp::_internal_x_center() const {
  return x_center_;
}
inline double MandelbrotBmp::x_center() const {
  // @@protoc_insertion_point(field_get:fractal_proto.MandelbrotBmp.x_center)
  return _internal_x_center();
}
inline void MandelbrotBmp::_internal_set_x_center(double value) {
  
  x_center_ = value;
}
inline void MandelbrotBmp::set_x_center(double value) {
  _internal_set_x_center(value);
  // @@protoc_insertion_point(field_set:fractal_proto.MandelbrotBmp.x_center)
}

// double y_center = 2;
inline void MandelbrotBmp::clear_y_center() {
  y_center_ = 0;
}
inline double MandelbrotBmp::_internal_y_center() const {
  return y_center_;
}
inline double MandelbrotBmp::y_center() const {
  // @@protoc_insertion_point(field_get:fractal_proto.MandelbrotBmp.y_center)
  return _internal_y_center();
}
inline void MandelbrotBmp::_internal_set_y_center(double value) {
  
  y_center_ = value;
}
inline void MandelbrotBmp::set_y_center(double value) {
  _internal_set_y_center(value);
  // @@protoc_insertion_point(field_set:fractal_proto.MandelbrotBmp.y_center)
}

// double x_domain_width = 3;
inline void MandelbrotBmp::clear_x_domain_width() {
  x_domain_width_ = 0;
}
inline double MandelbrotBmp::_internal_x_domain_width() const {
  return x_domain_width_;
}
inline double MandelbrotBmp::x_domain_width() const {
  // @@protoc_insertion_point(field_get:fractal_proto.MandelbrotBmp.x_domain_width)
  return _internal_x_domain_width();
}
inline void MandelbrotBmp::_internal_set_x_domain_width(double value) {
  
  x_domain_width_ = value;
}
inline void MandelbrotBmp::set_x_domain_width(double value) {
  _internal_set_x_domain_width(value);
  // @@protoc_insertion_point(field_set:fractal_proto.MandelbrotBmp.x_domain_width)
}

// int32 pixel_width = 4;
inline void MandelbrotBmp::clear_pixel_width() {
  pixel_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MandelbrotBmp::_internal_pixel_width() const {
  return pixel_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MandelbrotBmp::pixel_width() const {
  // @@protoc_insertion_point(field_get:fractal_proto.MandelbrotBmp.pixel_width)
  return _internal_pixel_width();
}
inline void MandelbrotBmp::_internal_set_pixel_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pixel_width_ = value;
}
inline void MandelbrotBmp::set_pixel_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pixel_width(value);
  // @@protoc_insertion_point(field_set:fractal_proto.MandelbrotBmp.pixel_width)
}

// int32 pixel_height = 5;
inline void MandelbrotBmp::clear_pixel_height() {
  pixel_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MandelbrotBmp::_internal_pixel_height() const {
  return pixel_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MandelbrotBmp::pixel_height() const {
  // @@protoc_insertion_point(field_get:fractal_proto.MandelbrotBmp.pixel_height)
  return _internal_pixel_height();
}
inline void MandelbrotBmp::_internal_set_pixel_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pixel_height_ = value;
}
inline void MandelbrotBmp::set_pixel_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pixel_height(value);
  // @@protoc_insertion_point(field_set:fractal_proto.MandelbrotBmp.pixel_height)
}

// repeated .fractal_proto.SingleColorScheme color_schemes = 6;
inline int MandelbrotBmp::_internal_color_schemes_size() const {
  return color_schemes_.size();
}
inline int MandelbrotBmp::color_schemes_size() const {
  return _internal_color_schemes_size();
}
inline void MandelbrotBmp::clear_color_schemes() {
  color_schemes_.Clear();
}
inline ::fractal_proto::SingleColorScheme* MandelbrotBmp::mutable_color_schemes(int index) {
  // @@protoc_insertion_point(field_mutable:fractal_proto.MandelbrotBmp.color_schemes)
  return color_schemes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::SingleColorScheme >*
MandelbrotBmp::mutable_color_schemes() {
  // @@protoc_insertion_point(field_mutable_list:fractal_proto.MandelbrotBmp.color_schemes)
  return &color_schemes_;
}
inline const ::fractal_proto::SingleColorScheme& MandelbrotBmp::_internal_color_schemes(int index) const {
  return color_schemes_.Get(index);
}
inline const ::fractal_proto::SingleColorScheme& MandelbrotBmp::color_schemes(int index) const {
  // @@protoc_insertion_point(field_get:fractal_proto.MandelbrotBmp.color_schemes)
  return _internal_color_schemes(index);
}
inline ::fractal_proto::SingleColorScheme* MandelbrotBmp::_internal_add_color_schemes() {
  return color_schemes_.Add();
}
inline ::fractal_proto::SingleColorScheme* MandelbrotBmp::add_color_schemes() {
  // @@protoc_insertion_point(field_add:fractal_proto.MandelbrotBmp.color_schemes)
  return _internal_add_color_schemes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::SingleColorScheme >&
MandelbrotBmp::color_schemes() const {
  // @@protoc_insertion_point(field_list:fractal_proto.MandelbrotBmp.color_schemes)
  return color_schemes_;
}

// -------------------------------------------------------------------

// FractalBmpFactory

// repeated .fractal_proto.MandelbrotBmp bitmaps = 1;
inline int FractalBmpFactory::_internal_bitmaps_size() const {
  return bitmaps_.size();
}
inline int FractalBmpFactory::bitmaps_size() const {
  return _internal_bitmaps_size();
}
inline void FractalBmpFactory::clear_bitmaps() {
  bitmaps_.Clear();
}
inline ::fractal_proto::MandelbrotBmp* FractalBmpFactory::mutable_bitmaps(int index) {
  // @@protoc_insertion_point(field_mutable:fractal_proto.FractalBmpFactory.bitmaps)
  return bitmaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::MandelbrotBmp >*
FractalBmpFactory::mutable_bitmaps() {
  // @@protoc_insertion_point(field_mutable_list:fractal_proto.FractalBmpFactory.bitmaps)
  return &bitmaps_;
}
inline const ::fractal_proto::MandelbrotBmp& FractalBmpFactory::_internal_bitmaps(int index) const {
  return bitmaps_.Get(index);
}
inline const ::fractal_proto::MandelbrotBmp& FractalBmpFactory::bitmaps(int index) const {
  // @@protoc_insertion_point(field_get:fractal_proto.FractalBmpFactory.bitmaps)
  return _internal_bitmaps(index);
}
inline ::fractal_proto::MandelbrotBmp* FractalBmpFactory::_internal_add_bitmaps() {
  return bitmaps_.Add();
}
inline ::fractal_proto::MandelbrotBmp* FractalBmpFactory::add_bitmaps() {
  // @@protoc_insertion_point(field_add:fractal_proto.FractalBmpFactory.bitmaps)
  return _internal_add_bitmaps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fractal_proto::MandelbrotBmp >&
FractalBmpFactory::bitmaps() const {
  // @@protoc_insertion_point(field_list:fractal_proto.FractalBmpFactory.bitmaps)
  return bitmaps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fractal_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fractal_2eproto
