// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fractal.proto

#include "advanced_cxx/fractal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fractal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BmpGrapher_fractal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fractal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RGB_fractal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fractal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleColorScheme_fractal_2eproto;
namespace fractal_proto {
class RGBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RGB> _instance;
} _RGB_default_instance_;
class SingleColorSchemeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleColorScheme> _instance;
} _SingleColorScheme_default_instance_;
class BmpGrapherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BmpGrapher> _instance;
} _BmpGrapher_default_instance_;
class BmpGrapherFactoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BmpGrapherFactory> _instance;
} _BmpGrapherFactory_default_instance_;
}  // namespace fractal_proto
static void InitDefaultsscc_info_BmpGrapher_fractal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fractal_proto::_BmpGrapher_default_instance_;
    new (ptr) ::fractal_proto::BmpGrapher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fractal_proto::BmpGrapher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BmpGrapher_fractal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BmpGrapher_fractal_2eproto}, {
      &scc_info_SingleColorScheme_fractal_2eproto.base,}};

static void InitDefaultsscc_info_BmpGrapherFactory_fractal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fractal_proto::_BmpGrapherFactory_default_instance_;
    new (ptr) ::fractal_proto::BmpGrapherFactory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fractal_proto::BmpGrapherFactory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BmpGrapherFactory_fractal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BmpGrapherFactory_fractal_2eproto}, {
      &scc_info_BmpGrapher_fractal_2eproto.base,}};

static void InitDefaultsscc_info_RGB_fractal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fractal_proto::_RGB_default_instance_;
    new (ptr) ::fractal_proto::RGB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fractal_proto::RGB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RGB_fractal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RGB_fractal_2eproto}, {}};

static void InitDefaultsscc_info_SingleColorScheme_fractal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fractal_proto::_SingleColorScheme_default_instance_;
    new (ptr) ::fractal_proto::SingleColorScheme();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fractal_proto::SingleColorScheme::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleColorScheme_fractal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SingleColorScheme_fractal_2eproto}, {
      &scc_info_RGB_fractal_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fractal_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fractal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fractal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fractal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fractal_proto::RGB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fractal_proto::RGB, red_),
  PROTOBUF_FIELD_OFFSET(::fractal_proto::RGB, green_),
  PROTOBUF_FIELD_OFFSET(::fractal_proto::RGB, blue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fractal_proto::SingleColorScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fractal_proto::SingleColorScheme, mandelbrot_color_),
  PROTOBUF_FIELD_OFFSET(::fractal_proto::SingleColorScheme, iter_base_color_),
  PROTOBUF_FIELD_OFFSET(::fractal_proto::SingleColorScheme, out_filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fractal_proto::BmpGrapher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fractal_proto::BmpGrapher, x_center_),
  PROTOBUF_FIELD_OFFSET(::fractal_proto::BmpGrapher, y_center_),
  PROTOBUF_FIELD_OFFSET(::fractal_proto::BmpGrapher, x_domain_width_),
  PROTOBUF_FIELD_OFFSET(::fractal_proto::BmpGrapher, pixel_width_),
  PROTOBUF_FIELD_OFFSET(::fractal_proto::BmpGrapher, pixel_height_),
  PROTOBUF_FIELD_OFFSET(::fractal_proto::BmpGrapher, color_schemes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fractal_proto::BmpGrapherFactory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fractal_proto::BmpGrapherFactory, bitmaps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fractal_proto::RGB)},
  { 8, -1, sizeof(::fractal_proto::SingleColorScheme)},
  { 16, -1, sizeof(::fractal_proto::BmpGrapher)},
  { 27, -1, sizeof(::fractal_proto::BmpGrapherFactory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fractal_proto::_RGB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fractal_proto::_SingleColorScheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fractal_proto::_BmpGrapher_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fractal_proto::_BmpGrapherFactory_default_instance_),
};

const char descriptor_table_protodef_fractal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rfractal.proto\022\rfractal_proto\"/\n\003RGB\022\013\n"
  "\003red\030\001 \001(\005\022\r\n\005green\030\002 \001(\005\022\014\n\004blue\030\003 \001(\005\""
  "\204\001\n\021SingleColorScheme\022,\n\020mandelbrot_colo"
  "r\030\001 \001(\0132\022.fractal_proto.RGB\022+\n\017iter_base"
  "_color\030\002 \001(\0132\022.fractal_proto.RGB\022\024\n\014out_"
  "filename\030\003 \001(\t\"\254\001\n\nBmpGrapher\022\020\n\010x_cente"
  "r\030\001 \001(\001\022\020\n\010y_center\030\002 \001(\001\022\026\n\016x_domain_wi"
  "dth\030\003 \001(\001\022\023\n\013pixel_width\030\004 \001(\005\022\024\n\014pixel_"
  "height\030\005 \001(\005\0227\n\rcolor_schemes\030\006 \003(\0132 .fr"
  "actal_proto.SingleColorScheme\"\?\n\021BmpGrap"
  "herFactory\022*\n\007bitmaps\030\001 \003(\0132\031.fractal_pr"
  "oto.BmpGrapherb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fractal_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fractal_2eproto_sccs[4] = {
  &scc_info_BmpGrapher_fractal_2eproto.base,
  &scc_info_BmpGrapherFactory_fractal_2eproto.base,
  &scc_info_RGB_fractal_2eproto.base,
  &scc_info_SingleColorScheme_fractal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fractal_2eproto_once;
static bool descriptor_table_fractal_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fractal_2eproto = {
  &descriptor_table_fractal_2eproto_initialized, descriptor_table_protodef_fractal_2eproto, "fractal.proto", 462,
  &descriptor_table_fractal_2eproto_once, descriptor_table_fractal_2eproto_sccs, descriptor_table_fractal_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_fractal_2eproto::offsets,
  file_level_metadata_fractal_2eproto, 4, file_level_enum_descriptors_fractal_2eproto, file_level_service_descriptors_fractal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fractal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fractal_2eproto)), true);
namespace fractal_proto {

// ===================================================================

void RGB::InitAsDefaultInstance() {
}
class RGB::_Internal {
 public:
};

RGB::RGB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fractal_proto.RGB)
}
RGB::RGB(const RGB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:fractal_proto.RGB)
}

void RGB::SharedCtor() {
  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
}

RGB::~RGB() {
  // @@protoc_insertion_point(destructor:fractal_proto.RGB)
  SharedDtor();
}

void RGB::SharedDtor() {
}

void RGB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RGB& RGB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RGB_fractal_2eproto.base);
  return *internal_default_instance();
}


void RGB::Clear() {
// @@protoc_insertion_point(message_clear_start:fractal_proto.RGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  _internal_metadata_.Clear();
}

const char* RGB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RGB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fractal_proto.RGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 red = 1;
  if (this->red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_red(), target);
  }

  // int32 green = 2;
  if (this->green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_green(), target);
  }

  // int32 blue = 3;
  if (this->blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fractal_proto.RGB)
  return target;
}

size_t RGB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fractal_proto.RGB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 red = 1;
  if (this->red() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_red());
  }

  // int32 green = 2;
  if (this->green() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_green());
  }

  // int32 blue = 3;
  if (this->blue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RGB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fractal_proto.RGB)
  GOOGLE_DCHECK_NE(&from, this);
  const RGB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RGB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fractal_proto.RGB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fractal_proto.RGB)
    MergeFrom(*source);
  }
}

void RGB::MergeFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fractal_proto.RGB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red() != 0) {
    _internal_set_red(from._internal_red());
  }
  if (from.green() != 0) {
    _internal_set_green(from._internal_green());
  }
  if (from.blue() != 0) {
    _internal_set_blue(from._internal_blue());
  }
}

void RGB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fractal_proto.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGB::CopyFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fractal_proto.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGB::IsInitialized() const {
  return true;
}

void RGB::InternalSwap(RGB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(red_, other->red_);
  swap(green_, other->green_);
  swap(blue_, other->blue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RGB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleColorScheme::InitAsDefaultInstance() {
  ::fractal_proto::_SingleColorScheme_default_instance_._instance.get_mutable()->mandelbrot_color_ = const_cast< ::fractal_proto::RGB*>(
      ::fractal_proto::RGB::internal_default_instance());
  ::fractal_proto::_SingleColorScheme_default_instance_._instance.get_mutable()->iter_base_color_ = const_cast< ::fractal_proto::RGB*>(
      ::fractal_proto::RGB::internal_default_instance());
}
class SingleColorScheme::_Internal {
 public:
  static const ::fractal_proto::RGB& mandelbrot_color(const SingleColorScheme* msg);
  static const ::fractal_proto::RGB& iter_base_color(const SingleColorScheme* msg);
};

const ::fractal_proto::RGB&
SingleColorScheme::_Internal::mandelbrot_color(const SingleColorScheme* msg) {
  return *msg->mandelbrot_color_;
}
const ::fractal_proto::RGB&
SingleColorScheme::_Internal::iter_base_color(const SingleColorScheme* msg) {
  return *msg->iter_base_color_;
}
SingleColorScheme::SingleColorScheme()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fractal_proto.SingleColorScheme)
}
SingleColorScheme::SingleColorScheme(const SingleColorScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  out_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_out_filename().empty()) {
    out_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_filename_);
  }
  if (from._internal_has_mandelbrot_color()) {
    mandelbrot_color_ = new ::fractal_proto::RGB(*from.mandelbrot_color_);
  } else {
    mandelbrot_color_ = nullptr;
  }
  if (from._internal_has_iter_base_color()) {
    iter_base_color_ = new ::fractal_proto::RGB(*from.iter_base_color_);
  } else {
    iter_base_color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fractal_proto.SingleColorScheme)
}

void SingleColorScheme::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleColorScheme_fractal_2eproto.base);
  out_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mandelbrot_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iter_base_color_) -
      reinterpret_cast<char*>(&mandelbrot_color_)) + sizeof(iter_base_color_));
}

SingleColorScheme::~SingleColorScheme() {
  // @@protoc_insertion_point(destructor:fractal_proto.SingleColorScheme)
  SharedDtor();
}

void SingleColorScheme::SharedDtor() {
  out_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mandelbrot_color_;
  if (this != internal_default_instance()) delete iter_base_color_;
}

void SingleColorScheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleColorScheme& SingleColorScheme::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleColorScheme_fractal_2eproto.base);
  return *internal_default_instance();
}


void SingleColorScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:fractal_proto.SingleColorScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && mandelbrot_color_ != nullptr) {
    delete mandelbrot_color_;
  }
  mandelbrot_color_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && iter_base_color_ != nullptr) {
    delete iter_base_color_;
  }
  iter_base_color_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SingleColorScheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fractal_proto.RGB mandelbrot_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mandelbrot_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fractal_proto.RGB iter_base_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_iter_base_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string out_filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_out_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fractal_proto.SingleColorScheme.out_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleColorScheme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fractal_proto.SingleColorScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fractal_proto.RGB mandelbrot_color = 1;
  if (this->has_mandelbrot_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mandelbrot_color(this), target, stream);
  }

  // .fractal_proto.RGB iter_base_color = 2;
  if (this->has_iter_base_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::iter_base_color(this), target, stream);
  }

  // string out_filename = 3;
  if (this->out_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_out_filename().data(), static_cast<int>(this->_internal_out_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fractal_proto.SingleColorScheme.out_filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_out_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fractal_proto.SingleColorScheme)
  return target;
}

size_t SingleColorScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fractal_proto.SingleColorScheme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string out_filename = 3;
  if (this->out_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_out_filename());
  }

  // .fractal_proto.RGB mandelbrot_color = 1;
  if (this->has_mandelbrot_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mandelbrot_color_);
  }

  // .fractal_proto.RGB iter_base_color = 2;
  if (this->has_iter_base_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *iter_base_color_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleColorScheme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fractal_proto.SingleColorScheme)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleColorScheme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleColorScheme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fractal_proto.SingleColorScheme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fractal_proto.SingleColorScheme)
    MergeFrom(*source);
  }
}

void SingleColorScheme::MergeFrom(const SingleColorScheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fractal_proto.SingleColorScheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.out_filename().size() > 0) {

    out_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.out_filename_);
  }
  if (from.has_mandelbrot_color()) {
    _internal_mutable_mandelbrot_color()->::fractal_proto::RGB::MergeFrom(from._internal_mandelbrot_color());
  }
  if (from.has_iter_base_color()) {
    _internal_mutable_iter_base_color()->::fractal_proto::RGB::MergeFrom(from._internal_iter_base_color());
  }
}

void SingleColorScheme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fractal_proto.SingleColorScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleColorScheme::CopyFrom(const SingleColorScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fractal_proto.SingleColorScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleColorScheme::IsInitialized() const {
  return true;
}

void SingleColorScheme::InternalSwap(SingleColorScheme* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  out_filename_.Swap(&other->out_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mandelbrot_color_, other->mandelbrot_color_);
  swap(iter_base_color_, other->iter_base_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleColorScheme::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BmpGrapher::InitAsDefaultInstance() {
}
class BmpGrapher::_Internal {
 public:
};

BmpGrapher::BmpGrapher()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fractal_proto.BmpGrapher)
}
BmpGrapher::BmpGrapher(const BmpGrapher& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      color_schemes_(from.color_schemes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_center_, &from.x_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_height_) -
    reinterpret_cast<char*>(&x_center_)) + sizeof(pixel_height_));
  // @@protoc_insertion_point(copy_constructor:fractal_proto.BmpGrapher)
}

void BmpGrapher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BmpGrapher_fractal_2eproto.base);
  ::memset(&x_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_height_) -
      reinterpret_cast<char*>(&x_center_)) + sizeof(pixel_height_));
}

BmpGrapher::~BmpGrapher() {
  // @@protoc_insertion_point(destructor:fractal_proto.BmpGrapher)
  SharedDtor();
}

void BmpGrapher::SharedDtor() {
}

void BmpGrapher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BmpGrapher& BmpGrapher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BmpGrapher_fractal_2eproto.base);
  return *internal_default_instance();
}


void BmpGrapher::Clear() {
// @@protoc_insertion_point(message_clear_start:fractal_proto.BmpGrapher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_schemes_.Clear();
  ::memset(&x_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_height_) -
      reinterpret_cast<char*>(&x_center_)) + sizeof(pixel_height_));
  _internal_metadata_.Clear();
}

const char* BmpGrapher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x_center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y_center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x_domain_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_domain_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 pixel_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pixel_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pixel_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pixel_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fractal_proto.SingleColorScheme color_schemes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_color_schemes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BmpGrapher::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fractal_proto.BmpGrapher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_center = 1;
  if (!(this->x_center() <= 0 && this->x_center() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x_center(), target);
  }

  // double y_center = 2;
  if (!(this->y_center() <= 0 && this->y_center() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y_center(), target);
  }

  // double x_domain_width = 3;
  if (!(this->x_domain_width() <= 0 && this->x_domain_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x_domain_width(), target);
  }

  // int32 pixel_width = 4;
  if (this->pixel_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pixel_width(), target);
  }

  // int32 pixel_height = 5;
  if (this->pixel_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pixel_height(), target);
  }

  // repeated .fractal_proto.SingleColorScheme color_schemes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_color_schemes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_color_schemes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fractal_proto.BmpGrapher)
  return target;
}

size_t BmpGrapher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fractal_proto.BmpGrapher)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fractal_proto.SingleColorScheme color_schemes = 6;
  total_size += 1UL * this->_internal_color_schemes_size();
  for (const auto& msg : this->color_schemes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double x_center = 1;
  if (!(this->x_center() <= 0 && this->x_center() >= 0)) {
    total_size += 1 + 8;
  }

  // double y_center = 2;
  if (!(this->y_center() <= 0 && this->y_center() >= 0)) {
    total_size += 1 + 8;
  }

  // double x_domain_width = 3;
  if (!(this->x_domain_width() <= 0 && this->x_domain_width() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 pixel_width = 4;
  if (this->pixel_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pixel_width());
  }

  // int32 pixel_height = 5;
  if (this->pixel_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pixel_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BmpGrapher::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fractal_proto.BmpGrapher)
  GOOGLE_DCHECK_NE(&from, this);
  const BmpGrapher* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BmpGrapher>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fractal_proto.BmpGrapher)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fractal_proto.BmpGrapher)
    MergeFrom(*source);
  }
}

void BmpGrapher::MergeFrom(const BmpGrapher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fractal_proto.BmpGrapher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  color_schemes_.MergeFrom(from.color_schemes_);
  if (!(from.x_center() <= 0 && from.x_center() >= 0)) {
    _internal_set_x_center(from._internal_x_center());
  }
  if (!(from.y_center() <= 0 && from.y_center() >= 0)) {
    _internal_set_y_center(from._internal_y_center());
  }
  if (!(from.x_domain_width() <= 0 && from.x_domain_width() >= 0)) {
    _internal_set_x_domain_width(from._internal_x_domain_width());
  }
  if (from.pixel_width() != 0) {
    _internal_set_pixel_width(from._internal_pixel_width());
  }
  if (from.pixel_height() != 0) {
    _internal_set_pixel_height(from._internal_pixel_height());
  }
}

void BmpGrapher::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fractal_proto.BmpGrapher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BmpGrapher::CopyFrom(const BmpGrapher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fractal_proto.BmpGrapher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BmpGrapher::IsInitialized() const {
  return true;
}

void BmpGrapher::InternalSwap(BmpGrapher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  color_schemes_.InternalSwap(&other->color_schemes_);
  swap(x_center_, other->x_center_);
  swap(y_center_, other->y_center_);
  swap(x_domain_width_, other->x_domain_width_);
  swap(pixel_width_, other->pixel_width_);
  swap(pixel_height_, other->pixel_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BmpGrapher::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BmpGrapherFactory::InitAsDefaultInstance() {
}
class BmpGrapherFactory::_Internal {
 public:
};

BmpGrapherFactory::BmpGrapherFactory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fractal_proto.BmpGrapherFactory)
}
BmpGrapherFactory::BmpGrapherFactory(const BmpGrapherFactory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bitmaps_(from.bitmaps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fractal_proto.BmpGrapherFactory)
}

void BmpGrapherFactory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BmpGrapherFactory_fractal_2eproto.base);
}

BmpGrapherFactory::~BmpGrapherFactory() {
  // @@protoc_insertion_point(destructor:fractal_proto.BmpGrapherFactory)
  SharedDtor();
}

void BmpGrapherFactory::SharedDtor() {
}

void BmpGrapherFactory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BmpGrapherFactory& BmpGrapherFactory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BmpGrapherFactory_fractal_2eproto.base);
  return *internal_default_instance();
}


void BmpGrapherFactory::Clear() {
// @@protoc_insertion_point(message_clear_start:fractal_proto.BmpGrapherFactory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bitmaps_.Clear();
  _internal_metadata_.Clear();
}

const char* BmpGrapherFactory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fractal_proto.BmpGrapher bitmaps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bitmaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BmpGrapherFactory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fractal_proto.BmpGrapherFactory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fractal_proto.BmpGrapher bitmaps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bitmaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bitmaps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fractal_proto.BmpGrapherFactory)
  return target;
}

size_t BmpGrapherFactory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fractal_proto.BmpGrapherFactory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fractal_proto.BmpGrapher bitmaps = 1;
  total_size += 1UL * this->_internal_bitmaps_size();
  for (const auto& msg : this->bitmaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BmpGrapherFactory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fractal_proto.BmpGrapherFactory)
  GOOGLE_DCHECK_NE(&from, this);
  const BmpGrapherFactory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BmpGrapherFactory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fractal_proto.BmpGrapherFactory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fractal_proto.BmpGrapherFactory)
    MergeFrom(*source);
  }
}

void BmpGrapherFactory::MergeFrom(const BmpGrapherFactory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fractal_proto.BmpGrapherFactory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bitmaps_.MergeFrom(from.bitmaps_);
}

void BmpGrapherFactory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fractal_proto.BmpGrapherFactory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BmpGrapherFactory::CopyFrom(const BmpGrapherFactory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fractal_proto.BmpGrapherFactory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BmpGrapherFactory::IsInitialized() const {
  return true;
}

void BmpGrapherFactory::InternalSwap(BmpGrapherFactory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bitmaps_.InternalSwap(&other->bitmaps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BmpGrapherFactory::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fractal_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fractal_proto::RGB* Arena::CreateMaybeMessage< ::fractal_proto::RGB >(Arena* arena) {
  return Arena::CreateInternal< ::fractal_proto::RGB >(arena);
}
template<> PROTOBUF_NOINLINE ::fractal_proto::SingleColorScheme* Arena::CreateMaybeMessage< ::fractal_proto::SingleColorScheme >(Arena* arena) {
  return Arena::CreateInternal< ::fractal_proto::SingleColorScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::fractal_proto::BmpGrapher* Arena::CreateMaybeMessage< ::fractal_proto::BmpGrapher >(Arena* arena) {
  return Arena::CreateInternal< ::fractal_proto::BmpGrapher >(arena);
}
template<> PROTOBUF_NOINLINE ::fractal_proto::BmpGrapherFactory* Arena::CreateMaybeMessage< ::fractal_proto::BmpGrapherFactory >(Arena* arena) {
  return Arena::CreateInternal< ::fractal_proto::BmpGrapherFactory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
