// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bmp_grapher.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bmp_5fgrapher_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bmp_5fgrapher_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bmp_5fgrapher_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bmp_5fgrapher_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bmp_5fgrapher_2eproto;
namespace bmp_grapher_proto {
class BmpGrapher;
class BmpGrapherDefaultTypeInternal;
extern BmpGrapherDefaultTypeInternal _BmpGrapher_default_instance_;
class BmpGrapherFactory;
class BmpGrapherFactoryDefaultTypeInternal;
extern BmpGrapherFactoryDefaultTypeInternal _BmpGrapherFactory_default_instance_;
class ColorConfig;
class ColorConfigDefaultTypeInternal;
extern ColorConfigDefaultTypeInternal _ColorConfig_default_instance_;
class DodgyColorScheme;
class DodgyColorSchemeDefaultTypeInternal;
extern DodgyColorSchemeDefaultTypeInternal _DodgyColorScheme_default_instance_;
class MandelbrotCalc;
class MandelbrotCalcDefaultTypeInternal;
extern MandelbrotCalcDefaultTypeInternal _MandelbrotCalc_default_instance_;
class RGB;
class RGBDefaultTypeInternal;
extern RGBDefaultTypeInternal _RGB_default_instance_;
class SingleColorScheme;
class SingleColorSchemeDefaultTypeInternal;
extern SingleColorSchemeDefaultTypeInternal _SingleColorScheme_default_instance_;
}  // namespace bmp_grapher_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::bmp_grapher_proto::BmpGrapher* Arena::CreateMaybeMessage<::bmp_grapher_proto::BmpGrapher>(Arena*);
template<> ::bmp_grapher_proto::BmpGrapherFactory* Arena::CreateMaybeMessage<::bmp_grapher_proto::BmpGrapherFactory>(Arena*);
template<> ::bmp_grapher_proto::ColorConfig* Arena::CreateMaybeMessage<::bmp_grapher_proto::ColorConfig>(Arena*);
template<> ::bmp_grapher_proto::DodgyColorScheme* Arena::CreateMaybeMessage<::bmp_grapher_proto::DodgyColorScheme>(Arena*);
template<> ::bmp_grapher_proto::MandelbrotCalc* Arena::CreateMaybeMessage<::bmp_grapher_proto::MandelbrotCalc>(Arena*);
template<> ::bmp_grapher_proto::RGB* Arena::CreateMaybeMessage<::bmp_grapher_proto::RGB>(Arena*);
template<> ::bmp_grapher_proto::SingleColorScheme* Arena::CreateMaybeMessage<::bmp_grapher_proto::SingleColorScheme>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bmp_grapher_proto {

// ===================================================================

class RGB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmp_grapher_proto.RGB) */ {
 public:
  RGB();
  virtual ~RGB();

  RGB(const RGB& from);
  RGB(RGB&& from) noexcept
    : RGB() {
    *this = ::std::move(from);
  }

  inline RGB& operator=(const RGB& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGB& operator=(RGB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RGB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RGB* internal_default_instance() {
    return reinterpret_cast<const RGB*>(
               &_RGB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RGB& a, RGB& b) {
    a.Swap(&b);
  }
  inline void Swap(RGB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RGB* New() const final {
    return CreateMaybeMessage<RGB>(nullptr);
  }

  RGB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RGB& from);
  void MergeFrom(const RGB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmp_grapher_proto.RGB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bmp_5fgrapher_2eproto);
    return ::descriptor_table_bmp_5fgrapher_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
  };
  // int32 red = 1;
  void clear_red();
  ::PROTOBUF_NAMESPACE_ID::int32 red() const;
  void set_red(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_red() const;
  void _internal_set_red(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 green = 2;
  void clear_green();
  ::PROTOBUF_NAMESPACE_ID::int32 green() const;
  void set_green(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_green() const;
  void _internal_set_green(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 blue = 3;
  void clear_blue();
  ::PROTOBUF_NAMESPACE_ID::int32 blue() const;
  void set_blue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blue() const;
  void _internal_set_blue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bmp_grapher_proto.RGB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 red_;
  ::PROTOBUF_NAMESPACE_ID::int32 green_;
  ::PROTOBUF_NAMESPACE_ID::int32 blue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bmp_5fgrapher_2eproto;
};
// -------------------------------------------------------------------

class SingleColorScheme :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmp_grapher_proto.SingleColorScheme) */ {
 public:
  SingleColorScheme();
  virtual ~SingleColorScheme();

  SingleColorScheme(const SingleColorScheme& from);
  SingleColorScheme(SingleColorScheme&& from) noexcept
    : SingleColorScheme() {
    *this = ::std::move(from);
  }

  inline SingleColorScheme& operator=(const SingleColorScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleColorScheme& operator=(SingleColorScheme&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleColorScheme& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleColorScheme* internal_default_instance() {
    return reinterpret_cast<const SingleColorScheme*>(
               &_SingleColorScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SingleColorScheme& a, SingleColorScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleColorScheme* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleColorScheme* New() const final {
    return CreateMaybeMessage<SingleColorScheme>(nullptr);
  }

  SingleColorScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleColorScheme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleColorScheme& from);
  void MergeFrom(const SingleColorScheme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleColorScheme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmp_grapher_proto.SingleColorScheme";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bmp_5fgrapher_2eproto);
    return ::descriptor_table_bmp_5fgrapher_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHundredPerCentColorFieldNumber = 2,
    kScalingBaseColorFieldNumber = 3,
    kScalingDenominatorFieldNumber = 1,
  };
  // .bmp_grapher_proto.RGB hundred_per_cent_color = 2;
  bool has_hundred_per_cent_color() const;
  private:
  bool _internal_has_hundred_per_cent_color() const;
  public:
  void clear_hundred_per_cent_color();
  const ::bmp_grapher_proto::RGB& hundred_per_cent_color() const;
  ::bmp_grapher_proto::RGB* release_hundred_per_cent_color();
  ::bmp_grapher_proto::RGB* mutable_hundred_per_cent_color();
  void set_allocated_hundred_per_cent_color(::bmp_grapher_proto::RGB* hundred_per_cent_color);
  private:
  const ::bmp_grapher_proto::RGB& _internal_hundred_per_cent_color() const;
  ::bmp_grapher_proto::RGB* _internal_mutable_hundred_per_cent_color();
  public:

  // .bmp_grapher_proto.RGB scaling_base_color = 3;
  bool has_scaling_base_color() const;
  private:
  bool _internal_has_scaling_base_color() const;
  public:
  void clear_scaling_base_color();
  const ::bmp_grapher_proto::RGB& scaling_base_color() const;
  ::bmp_grapher_proto::RGB* release_scaling_base_color();
  ::bmp_grapher_proto::RGB* mutable_scaling_base_color();
  void set_allocated_scaling_base_color(::bmp_grapher_proto::RGB* scaling_base_color);
  private:
  const ::bmp_grapher_proto::RGB& _internal_scaling_base_color() const;
  ::bmp_grapher_proto::RGB* _internal_mutable_scaling_base_color();
  public:

  // int32 scaling_denominator = 1;
  void clear_scaling_denominator();
  ::PROTOBUF_NAMESPACE_ID::int32 scaling_denominator() const;
  void set_scaling_denominator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scaling_denominator() const;
  void _internal_set_scaling_denominator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bmp_grapher_proto.SingleColorScheme)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::bmp_grapher_proto::RGB* hundred_per_cent_color_;
  ::bmp_grapher_proto::RGB* scaling_base_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 scaling_denominator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bmp_5fgrapher_2eproto;
};
// -------------------------------------------------------------------

class DodgyColorScheme :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmp_grapher_proto.DodgyColorScheme) */ {
 public:
  DodgyColorScheme();
  virtual ~DodgyColorScheme();

  DodgyColorScheme(const DodgyColorScheme& from);
  DodgyColorScheme(DodgyColorScheme&& from) noexcept
    : DodgyColorScheme() {
    *this = ::std::move(from);
  }

  inline DodgyColorScheme& operator=(const DodgyColorScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline DodgyColorScheme& operator=(DodgyColorScheme&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DodgyColorScheme& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DodgyColorScheme* internal_default_instance() {
    return reinterpret_cast<const DodgyColorScheme*>(
               &_DodgyColorScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DodgyColorScheme& a, DodgyColorScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(DodgyColorScheme* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DodgyColorScheme* New() const final {
    return CreateMaybeMessage<DodgyColorScheme>(nullptr);
  }

  DodgyColorScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DodgyColorScheme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DodgyColorScheme& from);
  void MergeFrom(const DodgyColorScheme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DodgyColorScheme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmp_grapher_proto.DodgyColorScheme";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bmp_5fgrapher_2eproto);
    return ::descriptor_table_bmp_5fgrapher_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolidColorFieldNumber = 1,
  };
  // .bmp_grapher_proto.RGB solid_color = 1;
  bool has_solid_color() const;
  private:
  bool _internal_has_solid_color() const;
  public:
  void clear_solid_color();
  const ::bmp_grapher_proto::RGB& solid_color() const;
  ::bmp_grapher_proto::RGB* release_solid_color();
  ::bmp_grapher_proto::RGB* mutable_solid_color();
  void set_allocated_solid_color(::bmp_grapher_proto::RGB* solid_color);
  private:
  const ::bmp_grapher_proto::RGB& _internal_solid_color() const;
  ::bmp_grapher_proto::RGB* _internal_mutable_solid_color();
  public:

  // @@protoc_insertion_point(class_scope:bmp_grapher_proto.DodgyColorScheme)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::bmp_grapher_proto::RGB* solid_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bmp_5fgrapher_2eproto;
};
// -------------------------------------------------------------------

class ColorConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmp_grapher_proto.ColorConfig) */ {
 public:
  ColorConfig();
  virtual ~ColorConfig();

  ColorConfig(const ColorConfig& from);
  ColorConfig(ColorConfig&& from) noexcept
    : ColorConfig() {
    *this = ::std::move(from);
  }

  inline ColorConfig& operator=(const ColorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorConfig& operator=(ColorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorConfig& default_instance();

  enum ColorSchemeCase {
    kSingleColorScheme = 2,
    kDodgyColorScheme = 3,
    COLOR_SCHEME_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorConfig* internal_default_instance() {
    return reinterpret_cast<const ColorConfig*>(
               &_ColorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ColorConfig& a, ColorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorConfig* New() const final {
    return CreateMaybeMessage<ColorConfig>(nullptr);
  }

  ColorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorConfig& from);
  void MergeFrom(const ColorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmp_grapher_proto.ColorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bmp_5fgrapher_2eproto);
    return ::descriptor_table_bmp_5fgrapher_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutFilenameFieldNumber = 1,
    kSingleColorSchemeFieldNumber = 2,
    kDodgyColorSchemeFieldNumber = 3,
  };
  // string out_filename = 1;
  void clear_out_filename();
  const std::string& out_filename() const;
  void set_out_filename(const std::string& value);
  void set_out_filename(std::string&& value);
  void set_out_filename(const char* value);
  void set_out_filename(const char* value, size_t size);
  std::string* mutable_out_filename();
  std::string* release_out_filename();
  void set_allocated_out_filename(std::string* out_filename);
  private:
  const std::string& _internal_out_filename() const;
  void _internal_set_out_filename(const std::string& value);
  std::string* _internal_mutable_out_filename();
  public:

  // .bmp_grapher_proto.SingleColorScheme single_color_scheme = 2;
  bool has_single_color_scheme() const;
  private:
  bool _internal_has_single_color_scheme() const;
  public:
  void clear_single_color_scheme();
  const ::bmp_grapher_proto::SingleColorScheme& single_color_scheme() const;
  ::bmp_grapher_proto::SingleColorScheme* release_single_color_scheme();
  ::bmp_grapher_proto::SingleColorScheme* mutable_single_color_scheme();
  void set_allocated_single_color_scheme(::bmp_grapher_proto::SingleColorScheme* single_color_scheme);
  private:
  const ::bmp_grapher_proto::SingleColorScheme& _internal_single_color_scheme() const;
  ::bmp_grapher_proto::SingleColorScheme* _internal_mutable_single_color_scheme();
  public:

  // .bmp_grapher_proto.DodgyColorScheme dodgy_color_scheme = 3;
  bool has_dodgy_color_scheme() const;
  private:
  bool _internal_has_dodgy_color_scheme() const;
  public:
  void clear_dodgy_color_scheme();
  const ::bmp_grapher_proto::DodgyColorScheme& dodgy_color_scheme() const;
  ::bmp_grapher_proto::DodgyColorScheme* release_dodgy_color_scheme();
  ::bmp_grapher_proto::DodgyColorScheme* mutable_dodgy_color_scheme();
  void set_allocated_dodgy_color_scheme(::bmp_grapher_proto::DodgyColorScheme* dodgy_color_scheme);
  private:
  const ::bmp_grapher_proto::DodgyColorScheme& _internal_dodgy_color_scheme() const;
  ::bmp_grapher_proto::DodgyColorScheme* _internal_mutable_dodgy_color_scheme();
  public:

  void clear_color_scheme();
  ColorSchemeCase color_scheme_case() const;
  // @@protoc_insertion_point(class_scope:bmp_grapher_proto.ColorConfig)
 private:
  class _Internal;
  void set_has_single_color_scheme();
  void set_has_dodgy_color_scheme();

  inline bool has_color_scheme() const;
  inline void clear_has_color_scheme();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_filename_;
  union ColorSchemeUnion {
    ColorSchemeUnion() {}
    ::bmp_grapher_proto::SingleColorScheme* single_color_scheme_;
    ::bmp_grapher_proto::DodgyColorScheme* dodgy_color_scheme_;
  } color_scheme_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bmp_5fgrapher_2eproto;
};
// -------------------------------------------------------------------

class MandelbrotCalc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmp_grapher_proto.MandelbrotCalc) */ {
 public:
  MandelbrotCalc();
  virtual ~MandelbrotCalc();

  MandelbrotCalc(const MandelbrotCalc& from);
  MandelbrotCalc(MandelbrotCalc&& from) noexcept
    : MandelbrotCalc() {
    *this = ::std::move(from);
  }

  inline MandelbrotCalc& operator=(const MandelbrotCalc& from) {
    CopyFrom(from);
    return *this;
  }
  inline MandelbrotCalc& operator=(MandelbrotCalc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MandelbrotCalc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MandelbrotCalc* internal_default_instance() {
    return reinterpret_cast<const MandelbrotCalc*>(
               &_MandelbrotCalc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MandelbrotCalc& a, MandelbrotCalc& b) {
    a.Swap(&b);
  }
  inline void Swap(MandelbrotCalc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MandelbrotCalc* New() const final {
    return CreateMaybeMessage<MandelbrotCalc>(nullptr);
  }

  MandelbrotCalc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MandelbrotCalc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MandelbrotCalc& from);
  void MergeFrom(const MandelbrotCalc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MandelbrotCalc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmp_grapher_proto.MandelbrotCalc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bmp_5fgrapher_2eproto);
    return ::descriptor_table_bmp_5fgrapher_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxIterationsFieldNumber = 1,
  };
  // int32 max_iterations = 1;
  void clear_max_iterations();
  ::PROTOBUF_NAMESPACE_ID::int32 max_iterations() const;
  void set_max_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_iterations() const;
  void _internal_set_max_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bmp_grapher_proto.MandelbrotCalc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_iterations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bmp_5fgrapher_2eproto;
};
// -------------------------------------------------------------------

class BmpGrapher :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmp_grapher_proto.BmpGrapher) */ {
 public:
  BmpGrapher();
  virtual ~BmpGrapher();

  BmpGrapher(const BmpGrapher& from);
  BmpGrapher(BmpGrapher&& from) noexcept
    : BmpGrapher() {
    *this = ::std::move(from);
  }

  inline BmpGrapher& operator=(const BmpGrapher& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmpGrapher& operator=(BmpGrapher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmpGrapher& default_instance();

  enum PixelScoreCalculatorCase {
    kMandelbrotCalc = 6,
    PIXEL_SCORE_CALCULATOR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmpGrapher* internal_default_instance() {
    return reinterpret_cast<const BmpGrapher*>(
               &_BmpGrapher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BmpGrapher& a, BmpGrapher& b) {
    a.Swap(&b);
  }
  inline void Swap(BmpGrapher* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmpGrapher* New() const final {
    return CreateMaybeMessage<BmpGrapher>(nullptr);
  }

  BmpGrapher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmpGrapher>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmpGrapher& from);
  void MergeFrom(const BmpGrapher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmpGrapher* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmp_grapher_proto.BmpGrapher";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bmp_5fgrapher_2eproto);
    return ::descriptor_table_bmp_5fgrapher_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorConfigsFieldNumber = 7,
    kXCenterFieldNumber = 1,
    kYCenterFieldNumber = 2,
    kXDomainWidthFieldNumber = 3,
    kPixelWidthFieldNumber = 4,
    kPixelHeightFieldNumber = 5,
    kMandelbrotCalcFieldNumber = 6,
  };
  // repeated .bmp_grapher_proto.ColorConfig color_configs = 7;
  int color_configs_size() const;
  private:
  int _internal_color_configs_size() const;
  public:
  void clear_color_configs();
  ::bmp_grapher_proto::ColorConfig* mutable_color_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::ColorConfig >*
      mutable_color_configs();
  private:
  const ::bmp_grapher_proto::ColorConfig& _internal_color_configs(int index) const;
  ::bmp_grapher_proto::ColorConfig* _internal_add_color_configs();
  public:
  const ::bmp_grapher_proto::ColorConfig& color_configs(int index) const;
  ::bmp_grapher_proto::ColorConfig* add_color_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::ColorConfig >&
      color_configs() const;

  // double x_center = 1;
  void clear_x_center();
  double x_center() const;
  void set_x_center(double value);
  private:
  double _internal_x_center() const;
  void _internal_set_x_center(double value);
  public:

  // double y_center = 2;
  void clear_y_center();
  double y_center() const;
  void set_y_center(double value);
  private:
  double _internal_y_center() const;
  void _internal_set_y_center(double value);
  public:

  // double x_domain_width = 3;
  void clear_x_domain_width();
  double x_domain_width() const;
  void set_x_domain_width(double value);
  private:
  double _internal_x_domain_width() const;
  void _internal_set_x_domain_width(double value);
  public:

  // int32 pixel_width = 4;
  void clear_pixel_width();
  ::PROTOBUF_NAMESPACE_ID::int32 pixel_width() const;
  void set_pixel_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pixel_width() const;
  void _internal_set_pixel_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pixel_height = 5;
  void clear_pixel_height();
  ::PROTOBUF_NAMESPACE_ID::int32 pixel_height() const;
  void set_pixel_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pixel_height() const;
  void _internal_set_pixel_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .bmp_grapher_proto.MandelbrotCalc mandelbrot_calc = 6;
  bool has_mandelbrot_calc() const;
  private:
  bool _internal_has_mandelbrot_calc() const;
  public:
  void clear_mandelbrot_calc();
  const ::bmp_grapher_proto::MandelbrotCalc& mandelbrot_calc() const;
  ::bmp_grapher_proto::MandelbrotCalc* release_mandelbrot_calc();
  ::bmp_grapher_proto::MandelbrotCalc* mutable_mandelbrot_calc();
  void set_allocated_mandelbrot_calc(::bmp_grapher_proto::MandelbrotCalc* mandelbrot_calc);
  private:
  const ::bmp_grapher_proto::MandelbrotCalc& _internal_mandelbrot_calc() const;
  ::bmp_grapher_proto::MandelbrotCalc* _internal_mutable_mandelbrot_calc();
  public:

  void clear_pixel_score_calculator();
  PixelScoreCalculatorCase pixel_score_calculator_case() const;
  // @@protoc_insertion_point(class_scope:bmp_grapher_proto.BmpGrapher)
 private:
  class _Internal;
  void set_has_mandelbrot_calc();

  inline bool has_pixel_score_calculator() const;
  inline void clear_has_pixel_score_calculator();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::ColorConfig > color_configs_;
  double x_center_;
  double y_center_;
  double x_domain_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 pixel_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 pixel_height_;
  union PixelScoreCalculatorUnion {
    PixelScoreCalculatorUnion() {}
    ::bmp_grapher_proto::MandelbrotCalc* mandelbrot_calc_;
  } pixel_score_calculator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bmp_5fgrapher_2eproto;
};
// -------------------------------------------------------------------

class BmpGrapherFactory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bmp_grapher_proto.BmpGrapherFactory) */ {
 public:
  BmpGrapherFactory();
  virtual ~BmpGrapherFactory();

  BmpGrapherFactory(const BmpGrapherFactory& from);
  BmpGrapherFactory(BmpGrapherFactory&& from) noexcept
    : BmpGrapherFactory() {
    *this = ::std::move(from);
  }

  inline BmpGrapherFactory& operator=(const BmpGrapherFactory& from) {
    CopyFrom(from);
    return *this;
  }
  inline BmpGrapherFactory& operator=(BmpGrapherFactory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BmpGrapherFactory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BmpGrapherFactory* internal_default_instance() {
    return reinterpret_cast<const BmpGrapherFactory*>(
               &_BmpGrapherFactory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BmpGrapherFactory& a, BmpGrapherFactory& b) {
    a.Swap(&b);
  }
  inline void Swap(BmpGrapherFactory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BmpGrapherFactory* New() const final {
    return CreateMaybeMessage<BmpGrapherFactory>(nullptr);
  }

  BmpGrapherFactory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BmpGrapherFactory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BmpGrapherFactory& from);
  void MergeFrom(const BmpGrapherFactory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BmpGrapherFactory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bmp_grapher_proto.BmpGrapherFactory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bmp_5fgrapher_2eproto);
    return ::descriptor_table_bmp_5fgrapher_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitmapsFieldNumber = 1,
  };
  // repeated .bmp_grapher_proto.BmpGrapher bitmaps = 1;
  int bitmaps_size() const;
  private:
  int _internal_bitmaps_size() const;
  public:
  void clear_bitmaps();
  ::bmp_grapher_proto::BmpGrapher* mutable_bitmaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::BmpGrapher >*
      mutable_bitmaps();
  private:
  const ::bmp_grapher_proto::BmpGrapher& _internal_bitmaps(int index) const;
  ::bmp_grapher_proto::BmpGrapher* _internal_add_bitmaps();
  public:
  const ::bmp_grapher_proto::BmpGrapher& bitmaps(int index) const;
  ::bmp_grapher_proto::BmpGrapher* add_bitmaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::BmpGrapher >&
      bitmaps() const;

  // @@protoc_insertion_point(class_scope:bmp_grapher_proto.BmpGrapherFactory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::BmpGrapher > bitmaps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bmp_5fgrapher_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RGB

// int32 red = 1;
inline void RGB::clear_red() {
  red_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::_internal_red() const {
  return red_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::red() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.RGB.red)
  return _internal_red();
}
inline void RGB::_internal_set_red(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  red_ = value;
}
inline void RGB::set_red(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.RGB.red)
}

// int32 green = 2;
inline void RGB::clear_green() {
  green_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::_internal_green() const {
  return green_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::green() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.RGB.green)
  return _internal_green();
}
inline void RGB::_internal_set_green(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  green_ = value;
}
inline void RGB::set_green(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.RGB.green)
}

// int32 blue = 3;
inline void RGB::clear_blue() {
  blue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::_internal_blue() const {
  return blue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGB::blue() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.RGB.blue)
  return _internal_blue();
}
inline void RGB::_internal_set_blue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blue_ = value;
}
inline void RGB::set_blue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.RGB.blue)
}

// -------------------------------------------------------------------

// SingleColorScheme

// int32 scaling_denominator = 1;
inline void SingleColorScheme::clear_scaling_denominator() {
  scaling_denominator_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleColorScheme::_internal_scaling_denominator() const {
  return scaling_denominator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleColorScheme::scaling_denominator() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.SingleColorScheme.scaling_denominator)
  return _internal_scaling_denominator();
}
inline void SingleColorScheme::_internal_set_scaling_denominator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scaling_denominator_ = value;
}
inline void SingleColorScheme::set_scaling_denominator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scaling_denominator(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.SingleColorScheme.scaling_denominator)
}

// .bmp_grapher_proto.RGB hundred_per_cent_color = 2;
inline bool SingleColorScheme::_internal_has_hundred_per_cent_color() const {
  return this != internal_default_instance() && hundred_per_cent_color_ != nullptr;
}
inline bool SingleColorScheme::has_hundred_per_cent_color() const {
  return _internal_has_hundred_per_cent_color();
}
inline void SingleColorScheme::clear_hundred_per_cent_color() {
  if (GetArenaNoVirtual() == nullptr && hundred_per_cent_color_ != nullptr) {
    delete hundred_per_cent_color_;
  }
  hundred_per_cent_color_ = nullptr;
}
inline const ::bmp_grapher_proto::RGB& SingleColorScheme::_internal_hundred_per_cent_color() const {
  const ::bmp_grapher_proto::RGB* p = hundred_per_cent_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bmp_grapher_proto::RGB*>(
      &::bmp_grapher_proto::_RGB_default_instance_);
}
inline const ::bmp_grapher_proto::RGB& SingleColorScheme::hundred_per_cent_color() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.SingleColorScheme.hundred_per_cent_color)
  return _internal_hundred_per_cent_color();
}
inline ::bmp_grapher_proto::RGB* SingleColorScheme::release_hundred_per_cent_color() {
  // @@protoc_insertion_point(field_release:bmp_grapher_proto.SingleColorScheme.hundred_per_cent_color)
  
  ::bmp_grapher_proto::RGB* temp = hundred_per_cent_color_;
  hundred_per_cent_color_ = nullptr;
  return temp;
}
inline ::bmp_grapher_proto::RGB* SingleColorScheme::_internal_mutable_hundred_per_cent_color() {
  
  if (hundred_per_cent_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::bmp_grapher_proto::RGB>(GetArenaNoVirtual());
    hundred_per_cent_color_ = p;
  }
  return hundred_per_cent_color_;
}
inline ::bmp_grapher_proto::RGB* SingleColorScheme::mutable_hundred_per_cent_color() {
  // @@protoc_insertion_point(field_mutable:bmp_grapher_proto.SingleColorScheme.hundred_per_cent_color)
  return _internal_mutable_hundred_per_cent_color();
}
inline void SingleColorScheme::set_allocated_hundred_per_cent_color(::bmp_grapher_proto::RGB* hundred_per_cent_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hundred_per_cent_color_;
  }
  if (hundred_per_cent_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hundred_per_cent_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hundred_per_cent_color, submessage_arena);
    }
    
  } else {
    
  }
  hundred_per_cent_color_ = hundred_per_cent_color;
  // @@protoc_insertion_point(field_set_allocated:bmp_grapher_proto.SingleColorScheme.hundred_per_cent_color)
}

// .bmp_grapher_proto.RGB scaling_base_color = 3;
inline bool SingleColorScheme::_internal_has_scaling_base_color() const {
  return this != internal_default_instance() && scaling_base_color_ != nullptr;
}
inline bool SingleColorScheme::has_scaling_base_color() const {
  return _internal_has_scaling_base_color();
}
inline void SingleColorScheme::clear_scaling_base_color() {
  if (GetArenaNoVirtual() == nullptr && scaling_base_color_ != nullptr) {
    delete scaling_base_color_;
  }
  scaling_base_color_ = nullptr;
}
inline const ::bmp_grapher_proto::RGB& SingleColorScheme::_internal_scaling_base_color() const {
  const ::bmp_grapher_proto::RGB* p = scaling_base_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bmp_grapher_proto::RGB*>(
      &::bmp_grapher_proto::_RGB_default_instance_);
}
inline const ::bmp_grapher_proto::RGB& SingleColorScheme::scaling_base_color() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.SingleColorScheme.scaling_base_color)
  return _internal_scaling_base_color();
}
inline ::bmp_grapher_proto::RGB* SingleColorScheme::release_scaling_base_color() {
  // @@protoc_insertion_point(field_release:bmp_grapher_proto.SingleColorScheme.scaling_base_color)
  
  ::bmp_grapher_proto::RGB* temp = scaling_base_color_;
  scaling_base_color_ = nullptr;
  return temp;
}
inline ::bmp_grapher_proto::RGB* SingleColorScheme::_internal_mutable_scaling_base_color() {
  
  if (scaling_base_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::bmp_grapher_proto::RGB>(GetArenaNoVirtual());
    scaling_base_color_ = p;
  }
  return scaling_base_color_;
}
inline ::bmp_grapher_proto::RGB* SingleColorScheme::mutable_scaling_base_color() {
  // @@protoc_insertion_point(field_mutable:bmp_grapher_proto.SingleColorScheme.scaling_base_color)
  return _internal_mutable_scaling_base_color();
}
inline void SingleColorScheme::set_allocated_scaling_base_color(::bmp_grapher_proto::RGB* scaling_base_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scaling_base_color_;
  }
  if (scaling_base_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scaling_base_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scaling_base_color, submessage_arena);
    }
    
  } else {
    
  }
  scaling_base_color_ = scaling_base_color;
  // @@protoc_insertion_point(field_set_allocated:bmp_grapher_proto.SingleColorScheme.scaling_base_color)
}

// -------------------------------------------------------------------

// DodgyColorScheme

// .bmp_grapher_proto.RGB solid_color = 1;
inline bool DodgyColorScheme::_internal_has_solid_color() const {
  return this != internal_default_instance() && solid_color_ != nullptr;
}
inline bool DodgyColorScheme::has_solid_color() const {
  return _internal_has_solid_color();
}
inline void DodgyColorScheme::clear_solid_color() {
  if (GetArenaNoVirtual() == nullptr && solid_color_ != nullptr) {
    delete solid_color_;
  }
  solid_color_ = nullptr;
}
inline const ::bmp_grapher_proto::RGB& DodgyColorScheme::_internal_solid_color() const {
  const ::bmp_grapher_proto::RGB* p = solid_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bmp_grapher_proto::RGB*>(
      &::bmp_grapher_proto::_RGB_default_instance_);
}
inline const ::bmp_grapher_proto::RGB& DodgyColorScheme::solid_color() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.DodgyColorScheme.solid_color)
  return _internal_solid_color();
}
inline ::bmp_grapher_proto::RGB* DodgyColorScheme::release_solid_color() {
  // @@protoc_insertion_point(field_release:bmp_grapher_proto.DodgyColorScheme.solid_color)
  
  ::bmp_grapher_proto::RGB* temp = solid_color_;
  solid_color_ = nullptr;
  return temp;
}
inline ::bmp_grapher_proto::RGB* DodgyColorScheme::_internal_mutable_solid_color() {
  
  if (solid_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::bmp_grapher_proto::RGB>(GetArenaNoVirtual());
    solid_color_ = p;
  }
  return solid_color_;
}
inline ::bmp_grapher_proto::RGB* DodgyColorScheme::mutable_solid_color() {
  // @@protoc_insertion_point(field_mutable:bmp_grapher_proto.DodgyColorScheme.solid_color)
  return _internal_mutable_solid_color();
}
inline void DodgyColorScheme::set_allocated_solid_color(::bmp_grapher_proto::RGB* solid_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete solid_color_;
  }
  if (solid_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      solid_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solid_color, submessage_arena);
    }
    
  } else {
    
  }
  solid_color_ = solid_color;
  // @@protoc_insertion_point(field_set_allocated:bmp_grapher_proto.DodgyColorScheme.solid_color)
}

// -------------------------------------------------------------------

// ColorConfig

// string out_filename = 1;
inline void ColorConfig::clear_out_filename() {
  out_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ColorConfig::out_filename() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.ColorConfig.out_filename)
  return _internal_out_filename();
}
inline void ColorConfig::set_out_filename(const std::string& value) {
  _internal_set_out_filename(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.ColorConfig.out_filename)
}
inline std::string* ColorConfig::mutable_out_filename() {
  // @@protoc_insertion_point(field_mutable:bmp_grapher_proto.ColorConfig.out_filename)
  return _internal_mutable_out_filename();
}
inline const std::string& ColorConfig::_internal_out_filename() const {
  return out_filename_.GetNoArena();
}
inline void ColorConfig::_internal_set_out_filename(const std::string& value) {
  
  out_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColorConfig::set_out_filename(std::string&& value) {
  
  out_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bmp_grapher_proto.ColorConfig.out_filename)
}
inline void ColorConfig::set_out_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bmp_grapher_proto.ColorConfig.out_filename)
}
inline void ColorConfig::set_out_filename(const char* value, size_t size) {
  
  out_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bmp_grapher_proto.ColorConfig.out_filename)
}
inline std::string* ColorConfig::_internal_mutable_out_filename() {
  
  return out_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColorConfig::release_out_filename() {
  // @@protoc_insertion_point(field_release:bmp_grapher_proto.ColorConfig.out_filename)
  
  return out_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColorConfig::set_allocated_out_filename(std::string* out_filename) {
  if (out_filename != nullptr) {
    
  } else {
    
  }
  out_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_filename);
  // @@protoc_insertion_point(field_set_allocated:bmp_grapher_proto.ColorConfig.out_filename)
}

// .bmp_grapher_proto.SingleColorScheme single_color_scheme = 2;
inline bool ColorConfig::_internal_has_single_color_scheme() const {
  return color_scheme_case() == kSingleColorScheme;
}
inline bool ColorConfig::has_single_color_scheme() const {
  return _internal_has_single_color_scheme();
}
inline void ColorConfig::set_has_single_color_scheme() {
  _oneof_case_[0] = kSingleColorScheme;
}
inline void ColorConfig::clear_single_color_scheme() {
  if (_internal_has_single_color_scheme()) {
    delete color_scheme_.single_color_scheme_;
    clear_has_color_scheme();
  }
}
inline ::bmp_grapher_proto::SingleColorScheme* ColorConfig::release_single_color_scheme() {
  // @@protoc_insertion_point(field_release:bmp_grapher_proto.ColorConfig.single_color_scheme)
  if (_internal_has_single_color_scheme()) {
    clear_has_color_scheme();
      ::bmp_grapher_proto::SingleColorScheme* temp = color_scheme_.single_color_scheme_;
    color_scheme_.single_color_scheme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bmp_grapher_proto::SingleColorScheme& ColorConfig::_internal_single_color_scheme() const {
  return _internal_has_single_color_scheme()
      ? *color_scheme_.single_color_scheme_
      : *reinterpret_cast< ::bmp_grapher_proto::SingleColorScheme*>(&::bmp_grapher_proto::_SingleColorScheme_default_instance_);
}
inline const ::bmp_grapher_proto::SingleColorScheme& ColorConfig::single_color_scheme() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.ColorConfig.single_color_scheme)
  return _internal_single_color_scheme();
}
inline ::bmp_grapher_proto::SingleColorScheme* ColorConfig::_internal_mutable_single_color_scheme() {
  if (!_internal_has_single_color_scheme()) {
    clear_color_scheme();
    set_has_single_color_scheme();
    color_scheme_.single_color_scheme_ = CreateMaybeMessage< ::bmp_grapher_proto::SingleColorScheme >(
        GetArenaNoVirtual());
  }
  return color_scheme_.single_color_scheme_;
}
inline ::bmp_grapher_proto::SingleColorScheme* ColorConfig::mutable_single_color_scheme() {
  // @@protoc_insertion_point(field_mutable:bmp_grapher_proto.ColorConfig.single_color_scheme)
  return _internal_mutable_single_color_scheme();
}

// .bmp_grapher_proto.DodgyColorScheme dodgy_color_scheme = 3;
inline bool ColorConfig::_internal_has_dodgy_color_scheme() const {
  return color_scheme_case() == kDodgyColorScheme;
}
inline bool ColorConfig::has_dodgy_color_scheme() const {
  return _internal_has_dodgy_color_scheme();
}
inline void ColorConfig::set_has_dodgy_color_scheme() {
  _oneof_case_[0] = kDodgyColorScheme;
}
inline void ColorConfig::clear_dodgy_color_scheme() {
  if (_internal_has_dodgy_color_scheme()) {
    delete color_scheme_.dodgy_color_scheme_;
    clear_has_color_scheme();
  }
}
inline ::bmp_grapher_proto::DodgyColorScheme* ColorConfig::release_dodgy_color_scheme() {
  // @@protoc_insertion_point(field_release:bmp_grapher_proto.ColorConfig.dodgy_color_scheme)
  if (_internal_has_dodgy_color_scheme()) {
    clear_has_color_scheme();
      ::bmp_grapher_proto::DodgyColorScheme* temp = color_scheme_.dodgy_color_scheme_;
    color_scheme_.dodgy_color_scheme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bmp_grapher_proto::DodgyColorScheme& ColorConfig::_internal_dodgy_color_scheme() const {
  return _internal_has_dodgy_color_scheme()
      ? *color_scheme_.dodgy_color_scheme_
      : *reinterpret_cast< ::bmp_grapher_proto::DodgyColorScheme*>(&::bmp_grapher_proto::_DodgyColorScheme_default_instance_);
}
inline const ::bmp_grapher_proto::DodgyColorScheme& ColorConfig::dodgy_color_scheme() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.ColorConfig.dodgy_color_scheme)
  return _internal_dodgy_color_scheme();
}
inline ::bmp_grapher_proto::DodgyColorScheme* ColorConfig::_internal_mutable_dodgy_color_scheme() {
  if (!_internal_has_dodgy_color_scheme()) {
    clear_color_scheme();
    set_has_dodgy_color_scheme();
    color_scheme_.dodgy_color_scheme_ = CreateMaybeMessage< ::bmp_grapher_proto::DodgyColorScheme >(
        GetArenaNoVirtual());
  }
  return color_scheme_.dodgy_color_scheme_;
}
inline ::bmp_grapher_proto::DodgyColorScheme* ColorConfig::mutable_dodgy_color_scheme() {
  // @@protoc_insertion_point(field_mutable:bmp_grapher_proto.ColorConfig.dodgy_color_scheme)
  return _internal_mutable_dodgy_color_scheme();
}

inline bool ColorConfig::has_color_scheme() const {
  return color_scheme_case() != COLOR_SCHEME_NOT_SET;
}
inline void ColorConfig::clear_has_color_scheme() {
  _oneof_case_[0] = COLOR_SCHEME_NOT_SET;
}
inline ColorConfig::ColorSchemeCase ColorConfig::color_scheme_case() const {
  return ColorConfig::ColorSchemeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MandelbrotCalc

// int32 max_iterations = 1;
inline void MandelbrotCalc::clear_max_iterations() {
  max_iterations_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MandelbrotCalc::_internal_max_iterations() const {
  return max_iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MandelbrotCalc::max_iterations() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.MandelbrotCalc.max_iterations)
  return _internal_max_iterations();
}
inline void MandelbrotCalc::_internal_set_max_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_iterations_ = value;
}
inline void MandelbrotCalc::set_max_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_iterations(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.MandelbrotCalc.max_iterations)
}

// -------------------------------------------------------------------

// BmpGrapher

// double x_center = 1;
inline void BmpGrapher::clear_x_center() {
  x_center_ = 0;
}
inline double BmpGrapher::_internal_x_center() const {
  return x_center_;
}
inline double BmpGrapher::x_center() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.BmpGrapher.x_center)
  return _internal_x_center();
}
inline void BmpGrapher::_internal_set_x_center(double value) {
  
  x_center_ = value;
}
inline void BmpGrapher::set_x_center(double value) {
  _internal_set_x_center(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.BmpGrapher.x_center)
}

// double y_center = 2;
inline void BmpGrapher::clear_y_center() {
  y_center_ = 0;
}
inline double BmpGrapher::_internal_y_center() const {
  return y_center_;
}
inline double BmpGrapher::y_center() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.BmpGrapher.y_center)
  return _internal_y_center();
}
inline void BmpGrapher::_internal_set_y_center(double value) {
  
  y_center_ = value;
}
inline void BmpGrapher::set_y_center(double value) {
  _internal_set_y_center(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.BmpGrapher.y_center)
}

// double x_domain_width = 3;
inline void BmpGrapher::clear_x_domain_width() {
  x_domain_width_ = 0;
}
inline double BmpGrapher::_internal_x_domain_width() const {
  return x_domain_width_;
}
inline double BmpGrapher::x_domain_width() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.BmpGrapher.x_domain_width)
  return _internal_x_domain_width();
}
inline void BmpGrapher::_internal_set_x_domain_width(double value) {
  
  x_domain_width_ = value;
}
inline void BmpGrapher::set_x_domain_width(double value) {
  _internal_set_x_domain_width(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.BmpGrapher.x_domain_width)
}

// int32 pixel_width = 4;
inline void BmpGrapher::clear_pixel_width() {
  pixel_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmpGrapher::_internal_pixel_width() const {
  return pixel_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmpGrapher::pixel_width() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.BmpGrapher.pixel_width)
  return _internal_pixel_width();
}
inline void BmpGrapher::_internal_set_pixel_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pixel_width_ = value;
}
inline void BmpGrapher::set_pixel_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pixel_width(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.BmpGrapher.pixel_width)
}

// int32 pixel_height = 5;
inline void BmpGrapher::clear_pixel_height() {
  pixel_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmpGrapher::_internal_pixel_height() const {
  return pixel_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BmpGrapher::pixel_height() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.BmpGrapher.pixel_height)
  return _internal_pixel_height();
}
inline void BmpGrapher::_internal_set_pixel_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pixel_height_ = value;
}
inline void BmpGrapher::set_pixel_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pixel_height(value);
  // @@protoc_insertion_point(field_set:bmp_grapher_proto.BmpGrapher.pixel_height)
}

// .bmp_grapher_proto.MandelbrotCalc mandelbrot_calc = 6;
inline bool BmpGrapher::_internal_has_mandelbrot_calc() const {
  return pixel_score_calculator_case() == kMandelbrotCalc;
}
inline bool BmpGrapher::has_mandelbrot_calc() const {
  return _internal_has_mandelbrot_calc();
}
inline void BmpGrapher::set_has_mandelbrot_calc() {
  _oneof_case_[0] = kMandelbrotCalc;
}
inline void BmpGrapher::clear_mandelbrot_calc() {
  if (_internal_has_mandelbrot_calc()) {
    delete pixel_score_calculator_.mandelbrot_calc_;
    clear_has_pixel_score_calculator();
  }
}
inline ::bmp_grapher_proto::MandelbrotCalc* BmpGrapher::release_mandelbrot_calc() {
  // @@protoc_insertion_point(field_release:bmp_grapher_proto.BmpGrapher.mandelbrot_calc)
  if (_internal_has_mandelbrot_calc()) {
    clear_has_pixel_score_calculator();
      ::bmp_grapher_proto::MandelbrotCalc* temp = pixel_score_calculator_.mandelbrot_calc_;
    pixel_score_calculator_.mandelbrot_calc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bmp_grapher_proto::MandelbrotCalc& BmpGrapher::_internal_mandelbrot_calc() const {
  return _internal_has_mandelbrot_calc()
      ? *pixel_score_calculator_.mandelbrot_calc_
      : *reinterpret_cast< ::bmp_grapher_proto::MandelbrotCalc*>(&::bmp_grapher_proto::_MandelbrotCalc_default_instance_);
}
inline const ::bmp_grapher_proto::MandelbrotCalc& BmpGrapher::mandelbrot_calc() const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.BmpGrapher.mandelbrot_calc)
  return _internal_mandelbrot_calc();
}
inline ::bmp_grapher_proto::MandelbrotCalc* BmpGrapher::_internal_mutable_mandelbrot_calc() {
  if (!_internal_has_mandelbrot_calc()) {
    clear_pixel_score_calculator();
    set_has_mandelbrot_calc();
    pixel_score_calculator_.mandelbrot_calc_ = CreateMaybeMessage< ::bmp_grapher_proto::MandelbrotCalc >(
        GetArenaNoVirtual());
  }
  return pixel_score_calculator_.mandelbrot_calc_;
}
inline ::bmp_grapher_proto::MandelbrotCalc* BmpGrapher::mutable_mandelbrot_calc() {
  // @@protoc_insertion_point(field_mutable:bmp_grapher_proto.BmpGrapher.mandelbrot_calc)
  return _internal_mutable_mandelbrot_calc();
}

// repeated .bmp_grapher_proto.ColorConfig color_configs = 7;
inline int BmpGrapher::_internal_color_configs_size() const {
  return color_configs_.size();
}
inline int BmpGrapher::color_configs_size() const {
  return _internal_color_configs_size();
}
inline void BmpGrapher::clear_color_configs() {
  color_configs_.Clear();
}
inline ::bmp_grapher_proto::ColorConfig* BmpGrapher::mutable_color_configs(int index) {
  // @@protoc_insertion_point(field_mutable:bmp_grapher_proto.BmpGrapher.color_configs)
  return color_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::ColorConfig >*
BmpGrapher::mutable_color_configs() {
  // @@protoc_insertion_point(field_mutable_list:bmp_grapher_proto.BmpGrapher.color_configs)
  return &color_configs_;
}
inline const ::bmp_grapher_proto::ColorConfig& BmpGrapher::_internal_color_configs(int index) const {
  return color_configs_.Get(index);
}
inline const ::bmp_grapher_proto::ColorConfig& BmpGrapher::color_configs(int index) const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.BmpGrapher.color_configs)
  return _internal_color_configs(index);
}
inline ::bmp_grapher_proto::ColorConfig* BmpGrapher::_internal_add_color_configs() {
  return color_configs_.Add();
}
inline ::bmp_grapher_proto::ColorConfig* BmpGrapher::add_color_configs() {
  // @@protoc_insertion_point(field_add:bmp_grapher_proto.BmpGrapher.color_configs)
  return _internal_add_color_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::ColorConfig >&
BmpGrapher::color_configs() const {
  // @@protoc_insertion_point(field_list:bmp_grapher_proto.BmpGrapher.color_configs)
  return color_configs_;
}

inline bool BmpGrapher::has_pixel_score_calculator() const {
  return pixel_score_calculator_case() != PIXEL_SCORE_CALCULATOR_NOT_SET;
}
inline void BmpGrapher::clear_has_pixel_score_calculator() {
  _oneof_case_[0] = PIXEL_SCORE_CALCULATOR_NOT_SET;
}
inline BmpGrapher::PixelScoreCalculatorCase BmpGrapher::pixel_score_calculator_case() const {
  return BmpGrapher::PixelScoreCalculatorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BmpGrapherFactory

// repeated .bmp_grapher_proto.BmpGrapher bitmaps = 1;
inline int BmpGrapherFactory::_internal_bitmaps_size() const {
  return bitmaps_.size();
}
inline int BmpGrapherFactory::bitmaps_size() const {
  return _internal_bitmaps_size();
}
inline void BmpGrapherFactory::clear_bitmaps() {
  bitmaps_.Clear();
}
inline ::bmp_grapher_proto::BmpGrapher* BmpGrapherFactory::mutable_bitmaps(int index) {
  // @@protoc_insertion_point(field_mutable:bmp_grapher_proto.BmpGrapherFactory.bitmaps)
  return bitmaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::BmpGrapher >*
BmpGrapherFactory::mutable_bitmaps() {
  // @@protoc_insertion_point(field_mutable_list:bmp_grapher_proto.BmpGrapherFactory.bitmaps)
  return &bitmaps_;
}
inline const ::bmp_grapher_proto::BmpGrapher& BmpGrapherFactory::_internal_bitmaps(int index) const {
  return bitmaps_.Get(index);
}
inline const ::bmp_grapher_proto::BmpGrapher& BmpGrapherFactory::bitmaps(int index) const {
  // @@protoc_insertion_point(field_get:bmp_grapher_proto.BmpGrapherFactory.bitmaps)
  return _internal_bitmaps(index);
}
inline ::bmp_grapher_proto::BmpGrapher* BmpGrapherFactory::_internal_add_bitmaps() {
  return bitmaps_.Add();
}
inline ::bmp_grapher_proto::BmpGrapher* BmpGrapherFactory::add_bitmaps() {
  // @@protoc_insertion_point(field_add:bmp_grapher_proto.BmpGrapherFactory.bitmaps)
  return _internal_add_bitmaps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bmp_grapher_proto::BmpGrapher >&
BmpGrapherFactory::bitmaps() const {
  // @@protoc_insertion_point(field_list:bmp_grapher_proto.BmpGrapherFactory.bitmaps)
  return bitmaps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bmp_grapher_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bmp_5fgrapher_2eproto
